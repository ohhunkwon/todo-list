(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>r});var o=n(15),d=n.n(o),a=n(645),c=n.n(a)()(d());c.push([e.id,'*,\n*::after,\n*::before {\n  box-sizing: border-box;\n  padding: 0;\n  margin: 0;\n}\n\nhtml,\nbody {\n  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;\n  height: 100%;\n  font-size: 1.1rem;\n}\n\n.title {\n  border-bottom: 2px solid black;\n  padding: 30px;\n  font-size: 1.5rem;\n  color: white;\n  background-color: #444444;\n}\n\n.content {\n  display: flex;\n  height: 100%;\n  background-color: #EDEDED;\n}\n\n.todo-nav {\n  border-right: 2px solid black;\n  padding: 50px;\n  width: 300px;\n}\n\n.todo-categories li, h3 {\n  list-style-type: none;\n  padding: 15px 0;\n}\n\n.todos {\n  margin: 40px 50px;\n}\n\n#add-project {\n  margin: 10px 0px;\n}\n\nform {\n  margin: 15px 0px;\n}\n\n[data-tab-content] {\n  display: none;\n}\n\n[data-tab-content] p {\n  padding: 10px 0;\n}\n\n.active[data-tab-content] {\n  display: block;\n}\n\n.hidden {\n  display: none;\n}\n\n.empty-alert {\n  color: red;\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;;;EAGE,sBAAsB;EACtB,UAAU;EACV,SAAS;AACX;;AAEA;;EAEE,4DAA4D;EAC5D,YAAY;EACZ,iBAAiB;AACnB;;AAEA;EACE,8BAA8B;EAC9B,aAAa;EACb,iBAAiB;EACjB,YAAY;EACZ,yBAAyB;AAC3B;;AAEA;EACE,aAAa;EACb,YAAY;EACZ,yBAAyB;AAC3B;;AAEA;EACE,6BAA6B;EAC7B,aAAa;EACb,YAAY;AACd;;AAEA;EACE,qBAAqB;EACrB,eAAe;AACjB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,UAAU;AACZ",sourcesContent:['*,\n*::after,\n*::before {\n  box-sizing: border-box;\n  padding: 0;\n  margin: 0;\n}\n\nhtml,\nbody {\n  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;\n  height: 100%;\n  font-size: 1.1rem;\n}\n\n.title {\n  border-bottom: 2px solid black;\n  padding: 30px;\n  font-size: 1.5rem;\n  color: white;\n  background-color: #444444;\n}\n\n.content {\n  display: flex;\n  height: 100%;\n  background-color: #EDEDED;\n}\n\n.todo-nav {\n  border-right: 2px solid black;\n  padding: 50px;\n  width: 300px;\n}\n\n.todo-categories li, h3 {\n  list-style-type: none;\n  padding: 15px 0;\n}\n\n.todos {\n  margin: 40px 50px;\n}\n\n#add-project {\n  margin: 10px 0px;\n}\n\nform {\n  margin: 15px 0px;\n}\n\n[data-tab-content] {\n  display: none;\n}\n\n[data-tab-content] p {\n  padding: 10px 0;\n}\n\n.active[data-tab-content] {\n  display: block;\n}\n\n.hidden {\n  display: none;\n}\n\n.empty-alert {\n  color: red;\n}\n'],sourceRoot:""}]);const r=c},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,o){"string"==typeof e&&(e=[[null,e,""]]);var d={};if(o)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(d[c]=!0)}for(var r=0;r<e.length;r++){var i=[].concat(e[r]);o&&d[i[0]]||(n&&(i[2]?i[2]="".concat(n," and ").concat(i[2]):i[2]=n),t.push(i))}},t}},15:e=>{function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}e.exports=function(e){var n,o,d=(o=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var o,d,a=[],c=!0,r=!1;try{for(n=n.call(e);!(c=(o=n.next()).done)&&(a.push(o.value),!t||a.length!==t);c=!0);}catch(e){r=!0,d=e}finally{try{c||null==n.return||n.return()}finally{if(r)throw d}}return a}}(n,o)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var o=Object.prototype.toString.call(e).slice(8,-1);return"Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o?Array.from(e):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?t(e,n):void 0}}(n,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=d[1],c=d[3];if(!c)return a;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(c)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),s="/*# ".concat(i," */"),l=c.sources.map((function(e){return"/*# sourceURL=".concat(c.sourceRoot||"").concat(e," */")}));return[a].concat(l).concat([s]).join("\n")}return[a].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var a={},c=[],r=0;r<e.length;r++){var i=e[r],s=o.base?i[0]+o.base:i[0],l=a[s]||0,m="".concat(s," ").concat(l);a[s]=l+1;var p=n(m),u={css:i[1],media:i[2],sourceMap:i[3]};-1!==p?(t[p].references++,t[p].updater(u)):t.push({identifier:m,updater:d(u,o),references:1}),c.push(m)}return c}function d(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n.update(e=t)}else n.remove()}}e.exports=function(e,d){var a=o(e=e||[],d=d||{});return function(e){e=e||[];for(var c=0;c<a.length;c++){var r=n(a[c]);t[r].references--}for(var i=o(e,d),s=0;s<a.length;s++){var l=n(a[s]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}a=i}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o=n.css,d=n.media,a=n.sourceMap;d?e.setAttribute("media",d):e.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(o,e)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var d=t[o];if(void 0!==d)return d.exports;var a=t[o]={id:o,exports:{}};return e[o](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e=n(379),t=n.n(e),o=n(795),d=n.n(o),a=n(569),c=n.n(a),r=n(565),i=n.n(r),s=n(216),l=n.n(s),m=n(589),p=n.n(m),u=n(426),h={};h.styleTagTransform=p(),h.setAttributes=i(),h.insert=c().bind(null,"head"),h.domAPI=d(),h.insertStyleElement=l(),t()(u.Z,h),u.Z&&u.Z.locals&&u.Z.locals;class g{constructor(e,t,n){this.description=e,this.dueDate=t,this.completed=!1,this.id=Date.now()}setDescription(e){this.description=e}getDescription(){return this.description}setDate(){this.dueDate=dueDate}getDate(){return this.dueDate}setCompleted(){this.completed?this.completed=!1:this.completed=!0}getCompleted(){return this.completed}getID(){return this.id}}class y{constructor(e){this.name=e,this.tasks=[]}setName(e){this.name=e}getName(){return this.name}setTasks(e){this.tasks=e}getTasks(){return this.tasks}addTask(e){this.tasks.push(e)}}class E{static collection=[];static todayCollection=[];static weekCollection=[];static initializeProjectsTab(){E.createForm(),E.formPopUp(),E.submitToProjects(),E.cancelSubmission(),E.addDefaultProject()}static addDefaultProject(){E.collection.push(f.defaultProject)}static createForm(){const e=document.createElement("form"),t=document.getElementById("projects-tab");e.innerHTML='\n                <form action="#">\n                    <input type="text" id="project-description" name="description" placeholder="project" />\n                    <button type="submit" id="projects-submit-btn">Submit</button>\n                    <button type="button" id="projects-cancel-btn">Cancel</button>\n                </form>\n            ',e.classList.add("hidden"),e.id="projects-form",t.appendChild(e)}static formPopUp(){const e=document.getElementById("add-project"),t=document.getElementById("projects-form");e.addEventListener("click",(()=>{e.classList.add("hidden"),t.classList.remove("hidden")}))}static submitToProjects(){const e=document.getElementById("projects-submit-btn"),t=document.getElementById("add-project"),n=document.getElementById("project-description"),o=document.getElementById("projects-tab"),d=document.getElementById("projects-form"),a=document.getElementById("todos");e.addEventListener("click",(e=>{if(e.preventDefault(),t.classList.remove("hidden"),console.log(E.collection),""===n.value)E.checkFields();else if(E.collection.some((e=>e.getName()===n.value)))alert("This project already exists!");else{const e=new y(n.value);E.collection.push(e);const c=document.createElement("li");c.setAttribute("data-tab-target",`${e.getName()}`),c.textContent=`${e.getName()}`;const r=document.createElement("div");r.id=`${e.getName()}`,r.setAttribute("data-tab-content","");const i=document.createElement("h3");i.textContent=`${e.getName()}`;const s=document.createElement("p");s.textContent="+ Add Task",s.id=`add-task-to-${e.getName()}`,r.appendChild(i),r.appendChild(s),a.appendChild(r),o.insertBefore(c,t),n.value="",d.classList.add("hidden");const l=document.createElement("form"),m=document.getElementById(`${e.getName()}`);E.addFormToProject(e,l,m),E.projectFormPopUp(s,l),E.submitTaskToProject(e,m),E.switchCategory()}}))}static checkFields(){const e=document.getElementById("add-project"),t=document.getElementById("projects-tab"),n=document.querySelector(".empty-alert");if(e.classList.add("hidden"),n)return;const o=document.createElement("p");o.textContent="Please enter the title of the project.",o.classList.add("empty-alert"),t.appendChild(o),setTimeout((function(){t.removeChild(o)}),2e3)}static checkInboxFields(e,t){const n=document.querySelector(".empty-alert");if(e.classList.add("hidden"),n)return;const o=document.createElement("p");o.textContent="Please enter the description and due date of the task.",o.classList.add("empty-alert"),t.appendChild(o),setTimeout((function(){t.removeChild(o)}),2e3)}static cancelSubmission(){const e=document.getElementById("projects-cancel-btn"),t=document.getElementById("add-project"),n=document.getElementById("projects-form");e.addEventListener("click",(()=>{t.classList.remove("hidden"),n.classList.add("hidden")}))}static cancelForm(e){const t=document.getElementById(`${e}-cancel-btn`),n=document.getElementById(`add-task-to-${e}`),o=document.getElementById(`${e}-form`);t.addEventListener("click",(()=>{n.classList.remove("hidden"),o.classList.add("hidden")}))}static addFormToProject(e,t,n){t.innerHTML=`\n        <form action="#">\n            <input type="text" id="task-description-${e.getName()}" name="description" placeholder="task" />\n            <input type="date" id="dueDate-${e.getName()}" name="dueDate" placeholder="due date" />\n            <button type="submit" id="${e.getName()}-submit-btn">Submit</button>\n            <button type="button" id="${e.getName()}-cancel-btn">Cancel</button>\n        </form>`,t.classList.add("hidden"),t.id=`${e.getName()}-form`,n.appendChild(t),E.cancelForm(e.getName())}static projectFormPopUp(e,t){e.addEventListener("click",(()=>{e.classList.add("hidden"),t.classList.remove("hidden")}))}static submitTaskToProject(e,t){const n=document.getElementById(`${e.getName()}-submit-btn`),o=document.getElementById(`add-task-to-${e.getName()}`),d=document.getElementById(`task-description-${e.getName()}`),a=document.getElementById(`dueDate-${e.getName()}`),c=document.getElementById(`${e.getName()}-form`);n.addEventListener("click",(n=>{if(n.preventDefault(),o.classList.remove("hidden"),""===d.value||""===a.value)E.checkInboxFields(o,t);else if(e.getTasks().some((e=>e.getDescription()===d.value)))alert("This todo already exists!"),d.value="",a.value="",c.classList.add("hidden");else{const n=new g(d.value,a.value);e.addTask(n);const r=document.createElement("p");r.id=n.getID();const i=`${n.getDescription()} ${n.getCompleted()}`;r.innerHTML=`<input type="checkbox" id="${i}">\n                                            <p>${n.getDescription()} | due: ${n.getDate()}</p>\n                                            <button id='del-${n.getID()}'>delete</button>`;const s=r.childNodes;for(let e=0;e<s.length;e++)s[e].style&&s[e].style.setProperty("display","inline");t.insertBefore(r,o),d.value="",a.value="",c.classList.add("hidden"),E.addToToday(n),E.addToWeek(n),E.deleteTask(n.getID(),e),E.checkDone(i)}}))}static checkDone(e){const t=document.getElementById(e),n=document.getElementById(`${e}-clone`),o=document.getElementById(`${e}-clone-week`);t.addEventListener("change",(()=>{t.checked?(t.parentElement.childNodes[2].style.setProperty("text-decoration","line-through"),n&&(n.checked=!0,n.parentElement.childNodes[2].style.setProperty("text-decoration","line-through")),o&&(o.checked=!0,o.parentElement.childNodes[2].style.setProperty("text-decoration","line-through"))):(t.parentElement.childNodes[2].style.setProperty("text-decoration","none"),n&&(n.checked=!1,n.parentElement.childNodes[2].style.setProperty("text-decoration","none")),o&&(o.checked=!1,o.parentElement.childNodes[2].style.setProperty("text-decoration","none")))})),n&&n.addEventListener("change",(()=>{n.checked?(n.parentElement.childNodes[2].style.setProperty("text-decoration","line-through"),t.checked=!0,t.parentElement.childNodes[2].style.setProperty("text-decoration","line-through")):(n.parentElement.childNodes[2].style.setProperty("text-decoration","none"),t.checked=!1,t.parentElement.childNodes[2].style.setProperty("text-decoration","none"))})),o&&o.addEventListener("change",(()=>{o.checked?(o.parentElement.childNodes[2].style.setProperty("text-decoration","line-through"),t.checked=!0,t.parentElement.childNodes[2].style.setProperty("text-decoration","line-through"),n&&(n.checked=!0,n.parentElement.childNodes[2].style.setProperty("text-decoration","line-through"))):(o.parentElement.childNodes[2].style.setProperty("text-decoration","none"),t.checked=!1,t.parentElement.childNodes[2].style.setProperty("text-decoration","none"),n&&(n.checked=!1,n.parentElement.childNodes[2].style.setProperty("text-decoration","none")))}))}static deleteTask(e,t){const n=document.getElementById(`del-${e}`),o=document.getElementById(`del-${e}-clone`),d=document.getElementById(`del-${e}-clone-week`);n.addEventListener("click",(n=>{n.target.parentElement.remove(),o&&o.parentElement.remove(),d&&d.parentElement.remove(),t.getTasks().splice(t.getTasks().findIndex((t=>t.getID()===e)),1)})),o&&o.addEventListener("click",(o=>{o.target.parentElement.remove(),n.parentElement.remove(),d&&d.parentElement.remove(),t.getTasks().splice(t.getTasks().findIndex((t=>t.getID()===e)),1)})),d&&d.addEventListener("click",(d=>{d.target.parentElement.remove(),n.parentElement.remove(),o&&o.parentElement.remove(),t.getTasks().splice(t.getTasks().findIndex((t=>t.getID()===e)),1)}))}static addToToday(e){const t=E.collection,n=document.getElementById("today-content"),o=document.createElement("div"),d=`${e.getDescription()} ${e.getCompleted()}-clone`;o.id=`${e.getID()}-clone`,o.innerHTML=`<input type="checkbox" id="${d}">\n                                <p>${e.getDescription()} | due: ${e.getDate()}</p>\n                                <button id='del-${e.getID()}-clone'>delete</button>`;const a=o.childNodes;for(let e=0;e<a.length;e++)a[e].style&&a[e].style.setProperty("display","inline");t.forEach((e=>{e.getTasks().forEach((e=>{Number(e.dueDate.slice(-2))!==(new Date).getDate()||E.todayCollection.includes(e)||(E.todayCollection.push(e),n.appendChild(o))}))}))}static addToWeek(e){const t=E.collection,n=document.getElementById("this-week-content"),o=document.createElement("div"),d=`${e.getDescription()} ${e.getCompleted()}-clone-week`;o.id=`${e.getID()}-clone-week`,o.innerHTML=`<input type="checkbox" id="${d}">\n                                <p>${e.getDescription()} | due: ${e.getDate()}</p>\n                                <button id='del-${e.getID()}-clone-week'>delete</button>`;const a=o.childNodes;for(let e=0;e<a.length;e++)a[e].style&&a[e].style.setProperty("display","inline");t.forEach((e=>{e.getTasks().forEach((e=>{Number(e.dueDate.slice(-2))-(new Date).getDate()<=7&&!E.weekCollection.includes(e)&&(E.weekCollection.push(e),n.appendChild(o))}))}))}static switchCategory(){const e=document.querySelectorAll("[data-tab-target]"),t=document.querySelectorAll("[data-tab-content]");e.forEach((e=>{e.addEventListener("click",(()=>{const n=document.getElementById(e.dataset.tabTarget);t.forEach((e=>{e.classList.remove("active")})),n.classList.add("active")}))}))}}class f{static defaultProject=new y("default");static initializeInboxTab(){f.createForm(),f.formPopUp(),f.submitToInbox(),f.cancelForm()}static createForm(){const e=document.createElement("form"),t=document.getElementById("inbox");e.innerHTML='\n                <form action="#">\n                    <input type="text" id="task-description" name="description" placeholder="task" />\n                    <input type="date" id="dueDate" name="dueDate" placeholder="due date" />\n                    <button type="submit" id="inbox-submit-btn">Submit</button>\n                    <button type="button" id="inbox-cancel-btn">Cancel</button>\n                </form>\n            ',e.classList.add("hidden"),e.id="inbox-form",t.appendChild(e)}static formPopUp(){const e=document.getElementById("add-task"),t=document.getElementById("inbox-form");e.addEventListener("click",(()=>{e.classList.add("hidden"),t.classList.remove("hidden")}))}static submitToInbox(){const e=document.getElementById("inbox-submit-btn"),t=document.getElementById("add-task"),n=document.getElementById("task-description"),o=document.getElementById("dueDate"),d=document.getElementById("inbox-form"),a=document.getElementById("inbox");e.addEventListener("click",(e=>{if(e.preventDefault(),t.classList.remove("hidden"),""===n.value||""===o.value)f.checkFields(t,a);else if(f.defaultProject.getTasks().some((e=>e.getDescription()===n.value)))alert("This todo already exists!"),n.value="",o.value="",d.classList.add("hidden");else{const e=new g(n.value,o.value);f.defaultProject.addTask(e);const c=document.createElement("div");c.id=e.getID();const r=`${e.getDescription()} ${e.getCompleted()}`;c.innerHTML=`<input type="checkbox" id="${r}">\n                                            <p>${e.getDescription()} | due: ${e.getDate()}</p>\n                                            <button id='del-${e.getID()}'>delete</button>`;const i=c.childNodes;for(let e=0;e<i.length;e++)i[e].style&&i[e].style.setProperty("display","inline");a.insertBefore(c,t),n.value="",o.value="",d.classList.add("hidden"),f.addToToday(e),f.addToWeek(e),f.deleteTask(e.getID()),f.checkDone(r)}}))}static addToToday(e){const t=E.collection,n=document.getElementById("today-content"),o=document.createElement("div"),d=`${e.getDescription()} ${e.getCompleted()}-clone`;o.id=`${e.getID()}-clone`,o.innerHTML=`<input type="checkbox" id="${d}">\n                                <p>${e.getDescription()} | due: ${e.getDate()}</p>\n                                <button id='del-${e.getID()}-clone'>delete</button>`;const a=o.childNodes;for(let e=0;e<a.length;e++)a[e].style&&a[e].style.setProperty("display","inline");t.forEach((e=>{e.getTasks().forEach((e=>{Number(e.dueDate.slice(-2))!==(new Date).getDate()||E.todayCollection.includes(e)||(E.todayCollection.push(e),n.appendChild(o))}))}))}static addToWeek(e){const t=E.collection,n=document.getElementById("this-week-content"),o=document.createElement("div"),d=`${e.getDescription()} ${e.getCompleted()}-clone-week`;o.id=`${e.getID()}-clone-week`,o.innerHTML=`<input type="checkbox" id="${d}">\n                                <p>${e.getDescription()} | due: ${e.getDate()}</p>\n                                <button id='del-${e.getID()}-clone-week'>delete</button>`;const a=o.childNodes;for(let e=0;e<a.length;e++)a[e].style&&a[e].style.setProperty("display","inline");t.forEach((e=>{e.getTasks().forEach((e=>{Number(e.dueDate.slice(-2))-(new Date).getDate()<=7&&!E.weekCollection.includes(e)&&(E.weekCollection.push(e),n.appendChild(o))}))}))}static checkDone(e){const t=document.getElementById(e),n=document.getElementById(`${e}-clone`),o=document.getElementById(`${e}-clone-week`);t.addEventListener("change",(()=>{t.checked?(t.parentElement.childNodes[2].style.setProperty("text-decoration","line-through"),n&&(n.checked=!0,n.parentElement.childNodes[2].style.setProperty("text-decoration","line-through")),o&&(o.checked=!0,o.parentElement.childNodes[2].style.setProperty("text-decoration","line-through"))):(t.parentElement.childNodes[2].style.setProperty("text-decoration","none"),n&&(n.checked=!1,n.parentElement.childNodes[2].style.setProperty("text-decoration","none")),o&&(o.checked=!1,o.parentElement.childNodes[2].style.setProperty("text-decoration","none")))})),n&&n.addEventListener("change",(()=>{n.checked?(n.parentElement.childNodes[2].style.setProperty("text-decoration","line-through"),t.checked=!0,t.parentElement.childNodes[2].style.setProperty("text-decoration","line-through")):(n.parentElement.childNodes[2].style.setProperty("text-decoration","none"),t.checked=!1,t.parentElement.childNodes[2].style.setProperty("text-decoration","none"))})),o&&o.addEventListener("change",(()=>{o.checked?(o.parentElement.childNodes[2].style.setProperty("text-decoration","line-through"),t.checked=!0,t.parentElement.childNodes[2].style.setProperty("text-decoration","line-through"),n&&(n.checked=!0,n.parentElement.childNodes[2].style.setProperty("text-decoration","line-through"))):(o.parentElement.childNodes[2].style.setProperty("text-decoration","none"),t.checked=!1,t.parentElement.childNodes[2].style.setProperty("text-decoration","none"),n&&(n.checked=!1,n.parentElement.childNodes[2].style.setProperty("text-decoration","none")))}))}static deleteTask(e){const t=document.getElementById(`del-${e}`),n=document.getElementById(`del-${e}-clone`),o=document.getElementById(`del-${e}-clone-week`);t.addEventListener("click",(t=>{t.target.parentElement.remove(),n&&n.parentElement.remove(),o&&o.parentElement.remove(),f.defaultProject.getTasks().splice(f.defaultProject.getTasks().findIndex((t=>t.getID()===e)),1)})),n&&n.addEventListener("click",(n=>{n.target.parentElement.remove(),t.parentElement.remove(),o&&o.parentElement.remove(),f.defaultProject.getTasks().splice(f.defaultProject.getTasks().findIndex((t=>t.getID()===e)),1)})),o&&o.addEventListener("click",(o=>{o.target.parentElement.remove(),t.parentElement.remove(),n&&n.parentElement.remove(),f.defaultProject.getTasks().splice(f.defaultProject.getTasks().findIndex((t=>t.getID()===e)),1)}))}static checkFields(e,t){const n=document.querySelector(".empty-alert");if(e.classList.add("hidden"),n)return;const o=document.createElement("p");o.textContent="Please enter the description and due date of the task.",o.classList.add("empty-alert"),t.appendChild(o),setTimeout((function(){t.removeChild(o)}),2e3)}static cancelForm(){const e=document.getElementById("inbox-cancel-btn"),t=document.getElementById("add-task"),n=document.getElementById("inbox-form");e.addEventListener("click",(()=>{t.classList.remove("hidden"),n.classList.add("hidden")}))}}class A{static loadHomepage(){A.switchCategory(),f.initializeInboxTab(),E.initializeProjectsTab()}static switchCategory(){const e=document.querySelectorAll("[data-tab-target]"),t=document.querySelectorAll("[data-tab-content]");e.forEach((e=>{e.addEventListener("click",(()=>{const n=document.getElementById(e.dataset.tabTarget);t.forEach((e=>{e.classList.remove("active")})),n.classList.add("active")}))}))}}document.addEventListener("DOMContentLoaded",A.loadHomepage)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvc3R5bGUuY3NzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3Qvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdG9kby1saXN0L3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3RvZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3N0eWxlLmNzcz83MTYzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9tb2R1bGVzL1Rhc2suanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL21vZHVsZXMvUHJvamVjdC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvbW9kdWxlcy9Qcm9qZWN0c1VJLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9tb2R1bGVzL0luYm94VUkuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL21vZHVsZXMvSW5pdGlhbGl6ZVVJLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwiY29uY2F0Iiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWFRdWVyeSIsImRlZHVwZSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJsZW5ndGgiLCJfaSIsIl9hcnJheUxpa2VUb0FycmF5IiwiYXJyIiwibGVuIiwiYXJyMiIsIkFycmF5IiwiX2l0ZW0iLCJpc0FycmF5IiwiX2FycmF5V2l0aEhvbGVzIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJfcyIsIl9lIiwiX2FyciIsIl9uIiwiX2QiLCJjYWxsIiwibmV4dCIsImRvbmUiLCJ2YWx1ZSIsImVyciIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIm8iLCJtaW5MZW4iLCJuIiwiT2JqZWN0IiwicHJvdG90eXBlIiwic2xpY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJmcm9tIiwidGVzdCIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIlR5cGVFcnJvciIsIl9ub25JdGVyYWJsZVJlc3QiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290Iiwic3R5bGVzSW5Eb20iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXgiLCJvYmoiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkU3R5bGUiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2luZGV4Iiwic3BsaWNlIiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50IiwicmVtb3ZlQXR0cmlidXRlIiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwidW5kZWZpbmVkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJwcm9wIiwiaGFzT3duUHJvcGVydHkiLCJUYXNrIiwiZGVzY3JpcHRpb24iLCJkdWVEYXRlIiwiY29tcGxldGVkIiwiRGF0ZSIsIm5vdyIsInNldERlc2NyaXB0aW9uIiwiZ2V0RGVzY3JpcHRpb24iLCJzZXREYXRlIiwiZ2V0RGF0ZSIsInNldENvbXBsZXRlZCIsImdldENvbXBsZXRlZCIsImdldElEIiwiUHJvamVjdCIsInRhc2tzIiwic2V0TmFtZSIsImdldE5hbWUiLCJzZXRUYXNrcyIsImdldFRhc2tzIiwiYWRkVGFzayIsInRhc2siLCJQcm9qZWN0c1RhYiIsImNyZWF0ZUZvcm0iLCJmb3JtUG9wVXAiLCJzdWJtaXRUb1Byb2plY3RzIiwiY2FuY2VsU3VibWlzc2lvbiIsImFkZERlZmF1bHRQcm9qZWN0IiwiY29sbGVjdGlvbiIsImZvcm0iLCJwcm9qZWN0cyIsImdldEVsZW1lbnRCeUlkIiwiaW5uZXJIVE1MIiwiY2xhc3NMaXN0IiwiYWRkIiwiYWRkUHJvamVjdEJ0biIsImFkZEV2ZW50TGlzdGVuZXIiLCJzdWJtaXRCdG4iLCJwcm9qZWN0c1RhYiIsInRvZG9zIiwicHJldmVudERlZmF1bHQiLCJjb25zb2xlIiwibG9nIiwiY2hlY2tGaWVsZHMiLCJzb21lIiwicHJvamVjdCIsImFsZXJ0IiwicHJvamVjdERPTUVsZW1lbnQiLCJ0ZXh0Q29udGVudCIsInRhYkNvbnRlbnQiLCJwcm9qZWN0VGl0bGUiLCJhZGRUYXNrVG9Qcm9qZWN0IiwiaW5zZXJ0QmVmb3JlIiwicHJvamVjdEZvcm0iLCJwcm9qZWN0RGl2IiwiYWRkRm9ybVRvUHJvamVjdCIsInByb2plY3RGb3JtUG9wVXAiLCJzdWJtaXRUYXNrVG9Qcm9qZWN0Iiwic3dpdGNoQ2F0ZWdvcnkiLCJhbGVydEV4aXN0cyIsIm5vdGlmeUZpZWxkcyIsInNldFRpbWVvdXQiLCJhZGRUYXNrQnRuIiwiaW5ib3giLCJjYW5jZWxQcm9qZWN0QnRuIiwiY2FuY2VsVGFza0J0biIsImNhbmNlbEZvcm0iLCJjaGVja0luYm94RmllbGRzIiwidGFza0RPTUVsZW1lbnQiLCJpc0RvbmUiLCJub2RlcyIsImNoaWxkTm9kZXMiLCJzZXRQcm9wZXJ0eSIsImFkZFRvVG9kYXkiLCJhZGRUb1dlZWsiLCJkZWxldGVUYXNrIiwiY2hlY2tEb25lIiwiY2hlY2tib3giLCJjaGVja2JveENsb25lIiwiY2hlY2tib3hDbG9uZVdlZWsiLCJjaGVja2VkIiwicGFyZW50RWxlbWVudCIsImJ0biIsImJ0bkNsb25lIiwiYnRuQ2xvbmVXZWVrIiwiZmluZEluZGV4IiwidGFza0Nsb25lIiwiZm9yRWFjaCIsIk51bWJlciIsInRvZGF5Q29sbGVjdGlvbiIsImluY2x1ZGVzIiwid2Vla0NvbGxlY3Rpb24iLCJ0YWJzIiwicXVlcnlTZWxlY3RvckFsbCIsInRhYkNvbnRlbnRzIiwidGFiIiwiZGF0YXNldCIsInRhYlRhcmdldCIsIkluYm94VGFiIiwic3VibWl0VG9JbmJveCIsImRlZmF1bHRQcm9qZWN0IiwiVUkiLCJsb2FkSG9tZXBhZ2UiXSwibWFwcGluZ3MiOiJ1RkFHSUEsRSxNQUEwQixHQUE0QixLQUUxREEsRUFBd0JDLEtBQUssQ0FBQ0MsRUFBT0MsR0FBSSxnNkJBQW02QixHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQyw2QkFBNkIsTUFBUSxHQUFHLFNBQVcsbWRBQW1kLGVBQWlCLENBQUMsaTZCQUFtNkIsV0FBYSxNQUUvNkUsVyxRQ0NBRCxFQUFPRSxRQUFVLFNBQVVDLEdBQ3pCLElBQUlDLEVBQU8sR0F1RFgsT0FyREFBLEVBQUtDLFNBQVcsV0FDZCxPQUFPQyxLQUFLQyxLQUFJLFNBQVVDLEdBQ3hC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LEVBQWN4SSxTQUFTdUksaUJBQWlCLHNCQUU5Q0QsRUFBS0wsU0FBUVEsSUFDVEEsRUFBSTNELGlCQUFpQixTQUFTLEtBQzFCLE1BQU1oRixFQUFTRSxTQUFTeUUsZUFBZWdFLEVBQUlDLFFBQVFDLFdBQ25ESCxFQUFZUCxTQUFRdEMsSUFDaEJBLEVBQVdoQixVQUFVdEYsT0FBTyxhQUVoQ1MsRUFBTzZFLFVBQVVDLElBQUksaUJDckJyQzVFLFNBQVM4RSxpQkFBaUIsbUJBQW9CaUUsRUFBR0MsZSIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIqLFxcbio6OmFmdGVyLFxcbio6OmJlZm9yZSB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgcGFkZGluZzogMDtcXG4gIG1hcmdpbjogMDtcXG59XFxuXFxuaHRtbCxcXG5ib2R5IHtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiU2Vnb2UgVUlcXFwiLCBUYWhvbWEsIEdlbmV2YSwgVmVyZGFuYSwgc2Fucy1zZXJpZjtcXG4gIGhlaWdodDogMTAwJTtcXG4gIGZvbnQtc2l6ZTogMS4xcmVtO1xcbn1cXG5cXG4udGl0bGUge1xcbiAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkIGJsYWNrO1xcbiAgcGFkZGluZzogMzBweDtcXG4gIGZvbnQtc2l6ZTogMS41cmVtO1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzQ0NDQ0NDtcXG59XFxuXFxuLmNvbnRlbnQge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGhlaWdodDogMTAwJTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNFREVERUQ7XFxufVxcblxcbi50b2RvLW5hdiB7XFxuICBib3JkZXItcmlnaHQ6IDJweCBzb2xpZCBibGFjaztcXG4gIHBhZGRpbmc6IDUwcHg7XFxuICB3aWR0aDogMzAwcHg7XFxufVxcblxcbi50b2RvLWNhdGVnb3JpZXMgbGksIGgzIHtcXG4gIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcXG4gIHBhZGRpbmc6IDE1cHggMDtcXG59XFxuXFxuLnRvZG9zIHtcXG4gIG1hcmdpbjogNDBweCA1MHB4O1xcbn1cXG5cXG4jYWRkLXByb2plY3Qge1xcbiAgbWFyZ2luOiAxMHB4IDBweDtcXG59XFxuXFxuZm9ybSB7XFxuICBtYXJnaW46IDE1cHggMHB4O1xcbn1cXG5cXG5bZGF0YS10YWItY29udGVudF0ge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuW2RhdGEtdGFiLWNvbnRlbnRdIHAge1xcbiAgcGFkZGluZzogMTBweCAwO1xcbn1cXG5cXG4uYWN0aXZlW2RhdGEtdGFiLWNvbnRlbnRdIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5cXG4uaGlkZGVuIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi5lbXB0eS1hbGVydCB7XFxuICBjb2xvcjogcmVkO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBOzs7RUFHRSxzQkFBc0I7RUFDdEIsVUFBVTtFQUNWLFNBQVM7QUFDWDs7QUFFQTs7RUFFRSw0REFBNEQ7RUFDNUQsWUFBWTtFQUNaLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLDhCQUE4QjtFQUM5QixhQUFhO0VBQ2IsaUJBQWlCO0VBQ2pCLFlBQVk7RUFDWix5QkFBeUI7QUFDM0I7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsWUFBWTtFQUNaLHlCQUF5QjtBQUMzQjs7QUFFQTtFQUNFLDZCQUE2QjtFQUM3QixhQUFhO0VBQ2IsWUFBWTtBQUNkOztBQUVBO0VBQ0UscUJBQXFCO0VBQ3JCLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsY0FBYztBQUNoQjs7QUFFQTtFQUNFLGFBQWE7QUFDZjs7QUFFQTtFQUNFLFVBQVU7QUFDWlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIqLFxcbio6OmFmdGVyLFxcbio6OmJlZm9yZSB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgcGFkZGluZzogMDtcXG4gIG1hcmdpbjogMDtcXG59XFxuXFxuaHRtbCxcXG5ib2R5IHtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiU2Vnb2UgVUlcXFwiLCBUYWhvbWEsIEdlbmV2YSwgVmVyZGFuYSwgc2Fucy1zZXJpZjtcXG4gIGhlaWdodDogMTAwJTtcXG4gIGZvbnQtc2l6ZTogMS4xcmVtO1xcbn1cXG5cXG4udGl0bGUge1xcbiAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkIGJsYWNrO1xcbiAgcGFkZGluZzogMzBweDtcXG4gIGZvbnQtc2l6ZTogMS41cmVtO1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzQ0NDQ0NDtcXG59XFxuXFxuLmNvbnRlbnQge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGhlaWdodDogMTAwJTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNFREVERUQ7XFxufVxcblxcbi50b2RvLW5hdiB7XFxuICBib3JkZXItcmlnaHQ6IDJweCBzb2xpZCBibGFjaztcXG4gIHBhZGRpbmc6IDUwcHg7XFxuICB3aWR0aDogMzAwcHg7XFxufVxcblxcbi50b2RvLWNhdGVnb3JpZXMgbGksIGgzIHtcXG4gIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcXG4gIHBhZGRpbmc6IDE1cHggMDtcXG59XFxuXFxuLnRvZG9zIHtcXG4gIG1hcmdpbjogNDBweCA1MHB4O1xcbn1cXG5cXG4jYWRkLXByb2plY3Qge1xcbiAgbWFyZ2luOiAxMHB4IDBweDtcXG59XFxuXFxuZm9ybSB7XFxuICBtYXJnaW46IDE1cHggMHB4O1xcbn1cXG5cXG5bZGF0YS10YWItY29udGVudF0ge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuW2RhdGEtdGFiLWNvbnRlbnRdIHAge1xcbiAgcGFkZGluZzogMTBweCAwO1xcbn1cXG5cXG4uYWN0aXZlW2RhdGEtdGFiLWNvbnRlbnRdIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5cXG4uaGlkZGVuIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi5lbXB0eS1hbGVydCB7XFxuICBjb2xvcjogcmVkO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuIFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChjb250ZW50LCBcIn1cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSwgZGVkdXBlKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIFwiXCJdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG1vZHVsZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19pXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udGludWVcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMl0gPSBcIlwiLmNvbmNhdChtZWRpYVF1ZXJ5LCBcIiBhbmQgXCIpLmNvbmNhdChpdGVtWzJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgdmFyIF9pID0gYXJyID09IG51bGwgPyBudWxsIDogdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBhcnJbU3ltYm9sLml0ZXJhdG9yXSB8fCBhcnJbXCJAQGl0ZXJhdG9yXCJdOyBpZiAoX2kgPT0gbnVsbCkgcmV0dXJuOyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9zLCBfZTsgdHJ5IHsgZm9yIChfaSA9IF9pLmNhbGwoYXJyKTsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSkge1xuICB2YXIgX2l0ZW0gPSBfc2xpY2VkVG9BcnJheShpdGVtLCA0KSxcbiAgICAgIGNvbnRlbnQgPSBfaXRlbVsxXSxcbiAgICAgIGNzc01hcHBpbmcgPSBfaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5Eb20gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRvbS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRvbVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdXG4gICAgfTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXNJbkRvbS5wdXNoKHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogYWRkU3R5bGUob2JqLCBvcHRpb25zKSxcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gYWRkU3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRG9tW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRvbVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRvbS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cblxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcblxuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cblxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoc3R5bGUsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGUpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZSwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzO1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZS5yZW1vdmVBdHRyaWJ1dGUoXCJtZWRpYVwiKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZSwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGUpIHtcbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFRhc2sge1xuICAgIGNvbnN0cnVjdG9yKGRlc2NyaXB0aW9uLCBkdWVEYXRlLCBjb21wbGV0ZWQpIHtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uXG4gICAgICAgIHRoaXMuZHVlRGF0ZSA9IGR1ZURhdGVcbiAgICAgICAgdGhpcy5jb21wbGV0ZWQgPSBmYWxzZVxuICAgICAgICB0aGlzLmlkID0gRGF0ZS5ub3coKVxuICAgIH1cblxuICAgIHNldERlc2NyaXB0aW9uKGRlc2NyaXB0aW9uKSB7XG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvblxuICAgIH1cblxuICAgIGdldERlc2NyaXB0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kZXNjcmlwdGlvblxuICAgIH1cblxuICAgIHNldERhdGUoKSB7XG4gICAgICAgIHRoaXMuZHVlRGF0ZSA9IGR1ZURhdGVcbiAgICB9XG5cbiAgICBnZXREYXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kdWVEYXRlXG4gICAgfVxuXG4gICAgc2V0Q29tcGxldGVkKCkge1xuICAgICAgICB0aGlzLmNvbXBsZXRlZCA/IHRoaXMuY29tcGxldGVkID0gZmFsc2UgOiB0aGlzLmNvbXBsZXRlZCA9IHRydWVcbiAgICB9XG5cbiAgICBnZXRDb21wbGV0ZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlZFxuICAgIH1cblxuICAgIGdldElEKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pZFxuICAgIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBQcm9qZWN0IHtcbiAgICBjb25zdHJ1Y3RvcihuYW1lKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWVcbiAgICAgICAgdGhpcy50YXNrcyA9IFtdXG4gICAgfVxuXG4gICAgc2V0TmFtZShuYW1lKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWVcbiAgICB9XG5cbiAgICBnZXROYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lXG4gICAgfVxuXG4gICAgc2V0VGFza3ModGFza3MpIHtcbiAgICAgICAgdGhpcy50YXNrcyA9IHRhc2tzXG4gICAgfVxuXG4gICAgZ2V0VGFza3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRhc2tzXG4gICAgfVxuXG4gICAgYWRkVGFzayh0YXNrKSB7XG4gICAgICAgIHRoaXMudGFza3MucHVzaCh0YXNrKVxuICAgIH1cbn0iLCJpbXBvcnQgVGFzayBmcm9tICcuL1Rhc2snXG5pbXBvcnQgUHJvamVjdCBmcm9tICcuL1Byb2plY3QnXG5pbXBvcnQgSW5ib3hVSSBmcm9tICcuL0luYm94VUknXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb2plY3RzVGFiIHtcbiAgICBzdGF0aWMgY29sbGVjdGlvbiA9IFtdXG4gICAgc3RhdGljIHRvZGF5Q29sbGVjdGlvbiA9IFtdXG4gICAgc3RhdGljIHdlZWtDb2xsZWN0aW9uID0gW11cblxuICAgIHN0YXRpYyBpbml0aWFsaXplUHJvamVjdHNUYWIoKSB7XG5cbiAgICAgICAgUHJvamVjdHNUYWIuY3JlYXRlRm9ybSgpXG4gICAgICAgIFByb2plY3RzVGFiLmZvcm1Qb3BVcCgpXG4gICAgICAgIFByb2plY3RzVGFiLnN1Ym1pdFRvUHJvamVjdHMoKVxuICAgICAgICBQcm9qZWN0c1RhYi5jYW5jZWxTdWJtaXNzaW9uKClcbiAgICAgICAgUHJvamVjdHNUYWIuYWRkRGVmYXVsdFByb2plY3QoKVxuICAgIH1cblxuICAgIHN0YXRpYyBhZGREZWZhdWx0UHJvamVjdCgpIHtcbiAgICAgICAgUHJvamVjdHNUYWIuY29sbGVjdGlvbi5wdXNoKEluYm94VUkuZGVmYXVsdFByb2plY3QpXG4gICAgfVxuXG4gICAgc3RhdGljIGNyZWF0ZUZvcm0oKSB7XG4gICAgICAgIGNvbnN0IGZvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmb3JtJylcbiAgICAgICAgY29uc3QgcHJvamVjdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvamVjdHMtdGFiJylcbiAgICAgICAgZm9ybS5pbm5lckhUTUwgPSBgXG4gICAgICAgICAgICAgICAgPGZvcm0gYWN0aW9uPVwiI1wiPlxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBpZD1cInByb2plY3QtZGVzY3JpcHRpb25cIiBuYW1lPVwiZGVzY3JpcHRpb25cIiBwbGFjZWhvbGRlcj1cInByb2plY3RcIiAvPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBpZD1cInByb2plY3RzLXN1Ym1pdC1idG5cIj5TdWJtaXQ8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9XCJwcm9qZWN0cy1jYW5jZWwtYnRuXCI+Q2FuY2VsPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgICAgYFxuICAgICAgICBmb3JtLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpXG4gICAgICAgIGZvcm0uaWQgPSAncHJvamVjdHMtZm9ybSdcbiAgICAgICAgcHJvamVjdHMuYXBwZW5kQ2hpbGQoZm9ybSlcbiAgICB9XG5cbiAgICBzdGF0aWMgZm9ybVBvcFVwKCkge1xuICAgICAgICBjb25zdCBhZGRQcm9qZWN0QnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FkZC1wcm9qZWN0JylcbiAgICAgICAgY29uc3QgZm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9qZWN0cy1mb3JtJylcblxuICAgICAgICBhZGRQcm9qZWN0QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgYWRkUHJvamVjdEJ0bi5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKVxuICAgICAgICAgICAgZm9ybS5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHN0YXRpYyBzdWJtaXRUb1Byb2plY3RzKCkge1xuICAgICAgICBjb25zdCBzdWJtaXRCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvamVjdHMtc3VibWl0LWJ0bicpXG4gICAgICAgIGNvbnN0IGFkZFByb2plY3RCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYWRkLXByb2plY3QnKVxuICAgICAgICBjb25zdCBkZXNjcmlwdGlvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9qZWN0LWRlc2NyaXB0aW9uJylcbiAgICAgICAgY29uc3QgcHJvamVjdHNUYWIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvamVjdHMtdGFiJylcbiAgICAgICAgY29uc3QgZm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9qZWN0cy1mb3JtJylcbiAgICAgICAgY29uc3QgdG9kb3MgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndG9kb3MnKVxuXG4gICAgICAgIHN1Ym1pdEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcblxuICAgICAgICAgICAgYWRkUHJvamVjdEJ0bi5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKVxuXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhQcm9qZWN0c1RhYi5jb2xsZWN0aW9uKVxuXG4gICAgICAgICAgICBpZiAoZGVzY3JpcHRpb24udmFsdWUgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICBQcm9qZWN0c1RhYi5jaGVja0ZpZWxkcygpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChQcm9qZWN0c1RhYi5jb2xsZWN0aW9uLnNvbWUocHJvamVjdCA9PiBwcm9qZWN0LmdldE5hbWUoKSA9PT0gZGVzY3JpcHRpb24udmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgYWxlcnQoXCJUaGlzIHByb2plY3QgYWxyZWFkeSBleGlzdHMhXCIpXG4gICAgICAgICAgICB9IFxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJvamVjdCA9IG5ldyBQcm9qZWN0KGRlc2NyaXB0aW9uLnZhbHVlKVxuICAgICAgICAgICAgICAgIFByb2plY3RzVGFiLmNvbGxlY3Rpb24ucHVzaChwcm9qZWN0KVxuICAgICAgICAgICAgICAgIGNvbnN0IHByb2plY3RET01FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKVxuXG4gICAgICAgICAgICAgICAgcHJvamVjdERPTUVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLXRhYi10YXJnZXQnLCBgJHtwcm9qZWN0LmdldE5hbWUoKX1gKVxuICAgICAgICAgICAgICAgIHByb2plY3RET01FbGVtZW50LnRleHRDb250ZW50ID0gYCR7cHJvamVjdC5nZXROYW1lKCl9YFxuXG4gICAgICAgICAgICAgICAgY29uc3QgdGFiQ29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgICAgICAgICAgICAgdGFiQ29udGVudC5pZCA9IGAke3Byb2plY3QuZ2V0TmFtZSgpfWBcbiAgICAgICAgICAgICAgICB0YWJDb250ZW50LnNldEF0dHJpYnV0ZSgnZGF0YS10YWItY29udGVudCcsICcnKVxuICAgICAgICAgICAgICAgIGNvbnN0IHByb2plY3RUaXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gzJylcbiAgICAgICAgICAgICAgICBwcm9qZWN0VGl0bGUudGV4dENvbnRlbnQgPSBgJHtwcm9qZWN0LmdldE5hbWUoKX1gXG4gICAgICAgICAgICAgICAgY29uc3QgYWRkVGFza1RvUHJvamVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKVxuICAgICAgICAgICAgICAgIGFkZFRhc2tUb1Byb2plY3QudGV4dENvbnRlbnQgPSAnKyBBZGQgVGFzaydcbiAgICAgICAgICAgICAgICBhZGRUYXNrVG9Qcm9qZWN0LmlkID0gYGFkZC10YXNrLXRvLSR7cHJvamVjdC5nZXROYW1lKCl9YFxuICAgICAgICAgICAgICAgIHRhYkNvbnRlbnQuYXBwZW5kQ2hpbGQocHJvamVjdFRpdGxlKVxuICAgICAgICAgICAgICAgIHRhYkNvbnRlbnQuYXBwZW5kQ2hpbGQoYWRkVGFza1RvUHJvamVjdClcbiAgICAgICAgICAgICAgICB0b2Rvcy5hcHBlbmRDaGlsZCh0YWJDb250ZW50KVxuXG4gICAgICAgICAgICAgICAgcHJvamVjdHNUYWIuaW5zZXJ0QmVmb3JlKHByb2plY3RET01FbGVtZW50LCBhZGRQcm9qZWN0QnRuKVxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uLnZhbHVlID0gXCJcIlxuICAgICAgICAgICAgICAgIGZvcm0uY2xhc3NMaXN0LmFkZCgnaGlkZGVuJylcblxuICAgICAgICAgICAgICAgIGNvbnN0IHByb2plY3RGb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZm9ybScpXG4gICAgICAgICAgICAgICAgY29uc3QgcHJvamVjdERpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGAke3Byb2plY3QuZ2V0TmFtZSgpfWApXG5cbiAgICAgICAgICAgICAgICBQcm9qZWN0c1RhYi5hZGRGb3JtVG9Qcm9qZWN0KHByb2plY3QsIHByb2plY3RGb3JtLCBwcm9qZWN0RGl2KVxuICAgICAgICAgICAgICAgIFByb2plY3RzVGFiLnByb2plY3RGb3JtUG9wVXAoYWRkVGFza1RvUHJvamVjdCwgcHJvamVjdEZvcm0pXG4gICAgICAgICAgICAgICAgUHJvamVjdHNUYWIuc3VibWl0VGFza1RvUHJvamVjdChwcm9qZWN0LCBwcm9qZWN0RGl2KVxuICAgICAgICAgICAgICAgIFByb2plY3RzVGFiLnN3aXRjaENhdGVnb3J5KClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBzdGF0aWMgY2hlY2tGaWVsZHMoKSB7XG4gICAgICAgIGNvbnN0IGFkZFByb2plY3RCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYWRkLXByb2plY3QnKVxuICAgICAgICBjb25zdCBwcm9qZWN0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9qZWN0cy10YWInKVxuICAgICAgICBjb25zdCBhbGVydEV4aXN0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZW1wdHktYWxlcnRcIilcblxuICAgICAgICBhZGRQcm9qZWN0QnRuLmNsYXNzTGlzdC5hZGQoXCJoaWRkZW5cIilcblxuICAgICAgICBpZiAoYWxlcnRFeGlzdHMpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgbm90aWZ5RmllbGRzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpXG4gICAgICAgIG5vdGlmeUZpZWxkcy50ZXh0Q29udGVudCA9IFwiUGxlYXNlIGVudGVyIHRoZSB0aXRsZSBvZiB0aGUgcHJvamVjdC5cIlxuICAgICAgICBub3RpZnlGaWVsZHMuY2xhc3NMaXN0LmFkZCgnZW1wdHktYWxlcnQnKVxuXG4gICAgICAgIHByb2plY3RzLmFwcGVuZENoaWxkKG5vdGlmeUZpZWxkcylcblxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHByb2plY3RzLnJlbW92ZUNoaWxkKG5vdGlmeUZpZWxkcylcbiAgICAgICAgfSwgMjAwMClcbiAgICB9XG5cbiAgICBzdGF0aWMgY2hlY2tJbmJveEZpZWxkcyhhZGRUYXNrQnRuLCBpbmJveCkge1xuICAgICAgICBjb25zdCBhbGVydEV4aXN0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZW1wdHktYWxlcnRcIilcblxuICAgICAgICBhZGRUYXNrQnRuLmNsYXNzTGlzdC5hZGQoXCJoaWRkZW5cIilcblxuICAgICAgICBpZiAoYWxlcnRFeGlzdHMpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgbm90aWZ5RmllbGRzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpXG4gICAgICAgIG5vdGlmeUZpZWxkcy50ZXh0Q29udGVudCA9IFwiUGxlYXNlIGVudGVyIHRoZSBkZXNjcmlwdGlvbiBhbmQgZHVlIGRhdGUgb2YgdGhlIHRhc2suXCJcbiAgICAgICAgbm90aWZ5RmllbGRzLmNsYXNzTGlzdC5hZGQoJ2VtcHR5LWFsZXJ0JylcblxuICAgICAgICBpbmJveC5hcHBlbmRDaGlsZChub3RpZnlGaWVsZHMpXG5cbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpbmJveC5yZW1vdmVDaGlsZChub3RpZnlGaWVsZHMpXG4gICAgICAgIH0sIDIwMDApXG4gICAgfVxuXG4gICAgc3RhdGljIGNhbmNlbFN1Ym1pc3Npb24oKSB7XG4gICAgICAgIGNvbnN0IGNhbmNlbFByb2plY3RCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvamVjdHMtY2FuY2VsLWJ0bicpXG4gICAgICAgIGNvbnN0IGFkZFByb2plY3RCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYWRkLXByb2plY3QnKVxuICAgICAgICBjb25zdCBmb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2plY3RzLWZvcm0nKVxuXG4gICAgICAgIGNhbmNlbFByb2plY3RCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICBhZGRQcm9qZWN0QnRuLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpXG4gICAgICAgICAgICBmb3JtLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgc3RhdGljIGNhbmNlbEZvcm0ocHJvamVjdCkge1xuICAgICAgICBjb25zdCBjYW5jZWxUYXNrQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYCR7cHJvamVjdH0tY2FuY2VsLWJ0bmApXG4gICAgICAgIGNvbnN0IGFkZFRhc2tCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgYWRkLXRhc2stdG8tJHtwcm9qZWN0fWApXG4gICAgICAgIGNvbnN0IGZvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgJHtwcm9qZWN0fS1mb3JtYClcblxuICAgICAgICBjYW5jZWxUYXNrQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgYWRkVGFza0J0bi5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKVxuICAgICAgICAgICAgZm9ybS5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHN0YXRpYyBhZGRGb3JtVG9Qcm9qZWN0KHByb2plY3QsIHByb2plY3RGb3JtLCBwcm9qZWN0RGl2KSB7XG4gICAgICAgIHByb2plY3RGb3JtLmlubmVySFRNTCA9IGBcbiAgICAgICAgPGZvcm0gYWN0aW9uPVwiI1wiPlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJ0YXNrLWRlc2NyaXB0aW9uLSR7cHJvamVjdC5nZXROYW1lKCl9XCIgbmFtZT1cImRlc2NyaXB0aW9uXCIgcGxhY2Vob2xkZXI9XCJ0YXNrXCIgLz5cbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiZGF0ZVwiIGlkPVwiZHVlRGF0ZS0ke3Byb2plY3QuZ2V0TmFtZSgpfVwiIG5hbWU9XCJkdWVEYXRlXCIgcGxhY2Vob2xkZXI9XCJkdWUgZGF0ZVwiIC8+XG4gICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBpZD1cIiR7cHJvamVjdC5nZXROYW1lKCl9LXN1Ym1pdC1idG5cIj5TdWJtaXQ8L2J1dHRvbj5cbiAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPVwiJHtwcm9qZWN0LmdldE5hbWUoKX0tY2FuY2VsLWJ0blwiPkNhbmNlbDwvYnV0dG9uPlxuICAgICAgICA8L2Zvcm0+YFxuXG4gICAgICAgIHByb2plY3RGb3JtLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpXG4gICAgICAgIHByb2plY3RGb3JtLmlkID0gYCR7cHJvamVjdC5nZXROYW1lKCl9LWZvcm1gXG4gICAgICAgIHByb2plY3REaXYuYXBwZW5kQ2hpbGQocHJvamVjdEZvcm0pXG5cbiAgICAgICAgUHJvamVjdHNUYWIuY2FuY2VsRm9ybShwcm9qZWN0LmdldE5hbWUoKSlcbiAgICB9XG5cbiAgICBzdGF0aWMgcHJvamVjdEZvcm1Qb3BVcChhZGRUYXNrVG9Qcm9qZWN0LCBwcm9qZWN0Rm9ybSkge1xuICAgICAgICBhZGRUYXNrVG9Qcm9qZWN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgYWRkVGFza1RvUHJvamVjdC5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKVxuICAgICAgICAgICAgcHJvamVjdEZvcm0uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJylcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBzdGF0aWMgc3VibWl0VGFza1RvUHJvamVjdChwcm9qZWN0LCBwcm9qZWN0RGl2KSB7XG4gICAgICAgIGNvbnN0IHN1Ym1pdEJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGAke3Byb2plY3QuZ2V0TmFtZSgpfS1zdWJtaXQtYnRuYClcbiAgICAgICAgY29uc3QgYWRkVGFza0J0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBhZGQtdGFzay10by0ke3Byb2plY3QuZ2V0TmFtZSgpfWApXG4gICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHRhc2stZGVzY3JpcHRpb24tJHtwcm9qZWN0LmdldE5hbWUoKX1gKVxuICAgICAgICBjb25zdCBkdWVEYXRlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYGR1ZURhdGUtJHtwcm9qZWN0LmdldE5hbWUoKX1gKVxuICAgICAgICBjb25zdCBmb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYCR7cHJvamVjdC5nZXROYW1lKCl9LWZvcm1gKVxuXG4gICAgICAgIHN1Ym1pdEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcblxuICAgICAgICAgICAgYWRkVGFza0J0bi5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKVxuXG4gICAgICAgICAgICBpZiAoZGVzY3JpcHRpb24udmFsdWUgPT09IFwiXCIgfHwgZHVlRGF0ZS52YWx1ZSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgIFByb2plY3RzVGFiLmNoZWNrSW5ib3hGaWVsZHMoYWRkVGFza0J0biwgcHJvamVjdERpdilcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHByb2plY3QuZ2V0VGFza3MoKS5zb21lKHRhc2sgPT4gdGFzay5nZXREZXNjcmlwdGlvbigpID09PSBkZXNjcmlwdGlvbi52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBhbGVydChcIlRoaXMgdG9kbyBhbHJlYWR5IGV4aXN0cyFcIilcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbi52YWx1ZSA9IFwiXCJcbiAgICAgICAgICAgICAgICBkdWVEYXRlLnZhbHVlID0gXCJcIlxuICAgICAgICAgICAgICAgIGZvcm0uY2xhc3NMaXN0LmFkZCgnaGlkZGVuJylcbiAgICAgICAgICAgIH0gXG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0YXNrID0gbmV3IFRhc2soZGVzY3JpcHRpb24udmFsdWUsIGR1ZURhdGUudmFsdWUpXG4gICAgICAgICAgICAgICAgcHJvamVjdC5hZGRUYXNrKHRhc2spXG4gICAgICAgICAgICAgICAgY29uc3QgdGFza0RPTUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJylcbiAgICAgICAgICAgICAgICB0YXNrRE9NRWxlbWVudC5pZCA9IHRhc2suZ2V0SUQoKVxuICAgICAgICAgICAgICAgIGNvbnN0IGlzRG9uZSA9IGAke3Rhc2suZ2V0RGVzY3JpcHRpb24oKX0gJHt0YXNrLmdldENvbXBsZXRlZCgpfWBcblxuICAgICAgICAgICAgICAgIHRhc2tET01FbGVtZW50LmlubmVySFRNTCA9IGA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgaWQ9XCIke2lzRG9uZX1cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+JHt0YXNrLmdldERlc2NyaXB0aW9uKCl9IHwgZHVlOiAke3Rhc2suZ2V0RGF0ZSgpfTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBpZD0nZGVsLSR7dGFzay5nZXRJRCgpfSc+ZGVsZXRlPC9idXR0b24+YFxuXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29uc3Qgbm9kZXMgPSB0YXNrRE9NRWxlbWVudC5jaGlsZE5vZGVzXG5cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChub2Rlc1tpXS5zdHlsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXNbaV0uc3R5bGUuc2V0UHJvcGVydHkoJ2Rpc3BsYXknLCAnaW5saW5lJylcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHByb2plY3REaXYuaW5zZXJ0QmVmb3JlKHRhc2tET01FbGVtZW50LCBhZGRUYXNrQnRuKVxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uLnZhbHVlID0gXCJcIlxuICAgICAgICAgICAgICAgIGR1ZURhdGUudmFsdWUgPSBcIlwiXG4gICAgICAgICAgICAgICAgZm9ybS5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKVxuXG4gICAgICAgICAgICAgICAgUHJvamVjdHNUYWIuYWRkVG9Ub2RheSh0YXNrKVxuICAgICAgICAgICAgICAgIFByb2plY3RzVGFiLmFkZFRvV2Vlayh0YXNrKVxuICAgICAgICAgICAgICAgIFByb2plY3RzVGFiLmRlbGV0ZVRhc2sodGFzay5nZXRJRCgpLCBwcm9qZWN0KVxuICAgICAgICAgICAgICAgIFByb2plY3RzVGFiLmNoZWNrRG9uZShpc0RvbmUpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgc3RhdGljIGNoZWNrRG9uZShpc0RvbmUpIHtcbiAgICAgICAgY29uc3QgY2hlY2tib3ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpc0RvbmUpXG4gICAgICAgIGNvbnN0IGNoZWNrYm94Q2xvbmUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgJHtpc0RvbmV9LWNsb25lYClcbiAgICAgICAgY29uc3QgY2hlY2tib3hDbG9uZVdlZWsgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgJHtpc0RvbmV9LWNsb25lLXdlZWtgKVxuXG5cbiAgICAgICAgY2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGNoZWNrYm94LmNoZWNrZWQpIHtcbiAgICAgICAgICAgICAgICBjaGVja2JveC5wYXJlbnRFbGVtZW50LmNoaWxkTm9kZXNbMl0uc3R5bGUuc2V0UHJvcGVydHkoJ3RleHQtZGVjb3JhdGlvbicsICdsaW5lLXRocm91Z2gnKVxuICAgICAgICAgICAgICAgIGlmIChjaGVja2JveENsb25lKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrYm94Q2xvbmUuY2hlY2tlZCA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hDbG9uZS5wYXJlbnRFbGVtZW50LmNoaWxkTm9kZXNbMl0uc3R5bGUuc2V0UHJvcGVydHkoJ3RleHQtZGVjb3JhdGlvbicsICdsaW5lLXRocm91Z2gnKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY2hlY2tib3hDbG9uZVdlZWspIHtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hDbG9uZVdlZWsuY2hlY2tlZCA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hDbG9uZVdlZWsucGFyZW50RWxlbWVudC5jaGlsZE5vZGVzWzJdLnN0eWxlLnNldFByb3BlcnR5KCd0ZXh0LWRlY29yYXRpb24nLCAnbGluZS10aHJvdWdoJylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNoZWNrYm94LnBhcmVudEVsZW1lbnQuY2hpbGROb2Rlc1syXS5zdHlsZS5zZXRQcm9wZXJ0eSgndGV4dC1kZWNvcmF0aW9uJywgJ25vbmUnKVxuICAgICAgICAgICAgICAgIGlmIChjaGVja2JveENsb25lKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrYm94Q2xvbmUuY2hlY2tlZCA9IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrYm94Q2xvbmUucGFyZW50RWxlbWVudC5jaGlsZE5vZGVzWzJdLnN0eWxlLnNldFByb3BlcnR5KCd0ZXh0LWRlY29yYXRpb24nLCAnbm9uZScpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjaGVja2JveENsb25lV2Vlaykge1xuICAgICAgICAgICAgICAgICAgICBjaGVja2JveENsb25lV2Vlay5jaGVja2VkID0gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hDbG9uZVdlZWsucGFyZW50RWxlbWVudC5jaGlsZE5vZGVzWzJdLnN0eWxlLnNldFByb3BlcnR5KCd0ZXh0LWRlY29yYXRpb24nLCAnbm9uZScpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICAgIGlmIChjaGVja2JveENsb25lKSB7XG4gICAgICAgICAgICBjaGVja2JveENsb25lLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY2hlY2tib3hDbG9uZS5jaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrYm94Q2xvbmUucGFyZW50RWxlbWVudC5jaGlsZE5vZGVzWzJdLnN0eWxlLnNldFByb3BlcnR5KCd0ZXh0LWRlY29yYXRpb24nLCAnbGluZS10aHJvdWdoJylcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tib3guY2hlY2tlZCA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tib3gucGFyZW50RWxlbWVudC5jaGlsZE5vZGVzWzJdLnN0eWxlLnNldFByb3BlcnR5KCd0ZXh0LWRlY29yYXRpb24nLCAnbGluZS10aHJvdWdoJylcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjaGVja2JveENsb25lLnBhcmVudEVsZW1lbnQuY2hpbGROb2Rlc1syXS5zdHlsZS5zZXRQcm9wZXJ0eSgndGV4dC1kZWNvcmF0aW9uJywgJ25vbmUnKVxuICAgICAgICAgICAgICAgICAgICBjaGVja2JveC5jaGVja2VkID0gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tib3gucGFyZW50RWxlbWVudC5jaGlsZE5vZGVzWzJdLnN0eWxlLnNldFByb3BlcnR5KCd0ZXh0LWRlY29yYXRpb24nLCAnbm9uZScpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaGVja2JveENsb25lV2Vlaykge1xuICAgICAgICAgICAgY2hlY2tib3hDbG9uZVdlZWsuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChjaGVja2JveENsb25lV2Vlay5jaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrYm94Q2xvbmVXZWVrLnBhcmVudEVsZW1lbnQuY2hpbGROb2Rlc1syXS5zdHlsZS5zZXRQcm9wZXJ0eSgndGV4dC1kZWNvcmF0aW9uJywgJ2xpbmUtdGhyb3VnaCcpXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrYm94LmNoZWNrZWQgPSB0cnVlXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrYm94LnBhcmVudEVsZW1lbnQuY2hpbGROb2Rlc1syXS5zdHlsZS5zZXRQcm9wZXJ0eSgndGV4dC1kZWNvcmF0aW9uJywgJ2xpbmUtdGhyb3VnaCcpXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGVja2JveENsb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja2JveENsb25lLmNoZWNrZWQgPSB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja2JveENsb25lLnBhcmVudEVsZW1lbnQuY2hpbGROb2Rlc1syXS5zdHlsZS5zZXRQcm9wZXJ0eSgndGV4dC1kZWNvcmF0aW9uJywgJ2xpbmUtdGhyb3VnaCcpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjaGVja2JveENsb25lV2Vlay5wYXJlbnRFbGVtZW50LmNoaWxkTm9kZXNbMl0uc3R5bGUuc2V0UHJvcGVydHkoJ3RleHQtZGVjb3JhdGlvbicsICdub25lJylcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tib3guY2hlY2tlZCA9IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrYm94LnBhcmVudEVsZW1lbnQuY2hpbGROb2Rlc1syXS5zdHlsZS5zZXRQcm9wZXJ0eSgndGV4dC1kZWNvcmF0aW9uJywgJ25vbmUnKVxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hlY2tib3hDbG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hDbG9uZS5jaGVja2VkID0gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrYm94Q2xvbmUucGFyZW50RWxlbWVudC5jaGlsZE5vZGVzWzJdLnN0eWxlLnNldFByb3BlcnR5KCd0ZXh0LWRlY29yYXRpb24nLCAnbm9uZScpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGRlbGV0ZVRhc2soaWQsIHByb2plY3QpIHtcbiAgICAgICAgY29uc3QgYnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYGRlbC0ke2lkfWApXG4gICAgICAgIGNvbnN0IGJ0bkNsb25lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYGRlbC0ke2lkfS1jbG9uZWApXG4gICAgICAgIGNvbnN0IGJ0bkNsb25lV2VlayA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBkZWwtJHtpZH0tY2xvbmUtd2Vla2ApXG5cbiAgICAgICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgICAgIGUudGFyZ2V0LnBhcmVudEVsZW1lbnQucmVtb3ZlKClcbiAgICAgICAgICAgIGlmIChidG5DbG9uZSkge1xuICAgICAgICAgICAgICAgIGJ0bkNsb25lLnBhcmVudEVsZW1lbnQucmVtb3ZlKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChidG5DbG9uZVdlZWspIHtcbiAgICAgICAgICAgICAgICBidG5DbG9uZVdlZWsucGFyZW50RWxlbWVudC5yZW1vdmUoKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJvamVjdC5nZXRUYXNrcygpXG4gICAgICAgICAgICAgICAgLnNwbGljZShwcm9qZWN0LmdldFRhc2tzKClcbiAgICAgICAgICAgICAgICAgICAgLmZpbmRJbmRleChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhc2sgPT4gdGFzay5nZXRJRCgpID09PSBpZFxuICAgICAgICAgICAgICAgICAgICApLCAxKVxuICAgICAgICB9KVxuICAgICAgICBpZiAoYnRuQ2xvbmUpIHtcbiAgICAgICAgICAgIGJ0bkNsb25lLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgICAgICAgICBlLnRhcmdldC5wYXJlbnRFbGVtZW50LnJlbW92ZSgpXG4gICAgICAgICAgICAgICAgYnRuLnBhcmVudEVsZW1lbnQucmVtb3ZlKClcbiAgICAgICAgICAgICAgICBpZiAoYnRuQ2xvbmVXZWVrKSB7XG4gICAgICAgICAgICAgICAgICAgIGJ0bkNsb25lV2Vlay5wYXJlbnRFbGVtZW50LnJlbW92ZSgpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHByb2plY3QuZ2V0VGFza3MoKVxuICAgICAgICAgICAgICAgIC5zcGxpY2UocHJvamVjdC5nZXRUYXNrcygpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kSW5kZXgoXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXNrID0+IHRhc2suZ2V0SUQoKSA9PT0gaWRcbiAgICAgICAgICAgICAgICAgICAgKSwgMSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJ0bkNsb25lV2Vlaykge1xuICAgICAgICAgICAgYnRuQ2xvbmVXZWVrLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgICAgICAgICBlLnRhcmdldC5wYXJlbnRFbGVtZW50LnJlbW92ZSgpXG4gICAgICAgICAgICAgICAgYnRuLnBhcmVudEVsZW1lbnQucmVtb3ZlKClcbiAgICAgICAgICAgICAgICBpZiAoYnRuQ2xvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgYnRuQ2xvbmUucGFyZW50RWxlbWVudC5yZW1vdmUoKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwcm9qZWN0LmdldFRhc2tzKClcbiAgICAgICAgICAgICAgICAuc3BsaWNlKHByb2plY3QuZ2V0VGFza3MoKVxuICAgICAgICAgICAgICAgICAgICAuZmluZEluZGV4KFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFzayA9PiB0YXNrLmdldElEKCkgPT09IGlkXG4gICAgICAgICAgICAgICAgICAgICksIDEpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGFkZFRvVG9kYXkodGFzaykge1xuICAgICAgICBjb25zdCBjb2xsZWN0aW9uID0gUHJvamVjdHNUYWIuY29sbGVjdGlvblxuICAgICAgICBjb25zdCB0YWJDb250ZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RvZGF5LWNvbnRlbnQnKVxuXG4gICAgICAgIGNvbnN0IHRhc2tDbG9uZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgICAgIGNvbnN0IGlzRG9uZSA9IGAke3Rhc2suZ2V0RGVzY3JpcHRpb24oKX0gJHt0YXNrLmdldENvbXBsZXRlZCgpfS1jbG9uZWBcbiAgICAgICAgdGFza0Nsb25lLmlkID0gYCR7dGFzay5nZXRJRCgpfS1jbG9uZWBcbiAgICAgICAgdGFza0Nsb25lLmlubmVySFRNTCA9ICAgYDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBpZD1cIiR7aXNEb25lfVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4ke3Rhc2suZ2V0RGVzY3JpcHRpb24oKX0gfCBkdWU6ICR7dGFzay5nZXREYXRlKCl9PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGlkPSdkZWwtJHt0YXNrLmdldElEKCl9LWNsb25lJz5kZWxldGU8L2J1dHRvbj5gXG4gICAgICAgIFxuICAgICAgICBjb25zdCBub2RlcyA9IHRhc2tDbG9uZS5jaGlsZE5vZGVzXG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKG5vZGVzW2ldLnN0eWxlKSB7XG4gICAgICAgICAgICAgICAgbm9kZXNbaV0uc3R5bGUuc2V0UHJvcGVydHkoJ2Rpc3BsYXknLCAnaW5saW5lJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbGxlY3Rpb24uZm9yRWFjaChwcm9qZWN0ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRhc2tzID0gcHJvamVjdC5nZXRUYXNrcygpXG4gICAgICAgICAgICB0YXNrcy5mb3JFYWNoKHRhc2sgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRheSA9IE51bWJlcih0YXNrLmR1ZURhdGUuc2xpY2UoLTIpKVxuICAgICAgICAgICAgICAgIGNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKVxuICAgICAgICAgICAgICAgIGNvbnN0IGRheVRvZGF5ID0gdG9kYXkuZ2V0RGF0ZSgpXG4gICAgICAgICAgICAgICAgaWYgKGRheSA9PT0gZGF5VG9kYXkgJiYgIVByb2plY3RzVGFiLnRvZGF5Q29sbGVjdGlvbi5pbmNsdWRlcyh0YXNrKSkge1xuICAgICAgICAgICAgICAgICAgICBQcm9qZWN0c1RhYi50b2RheUNvbGxlY3Rpb24ucHVzaCh0YXNrKVxuICAgICAgICAgICAgICAgICAgICB0YWJDb250ZW50LmFwcGVuZENoaWxkKHRhc2tDbG9uZSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHN0YXRpYyBhZGRUb1dlZWsodGFzaykge1xuICAgICAgICBjb25zdCBjb2xsZWN0aW9uID0gUHJvamVjdHNUYWIuY29sbGVjdGlvblxuICAgICAgICBjb25zdCB0YWJDb250ZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RoaXMtd2Vlay1jb250ZW50JylcblxuICAgICAgICBjb25zdCB0YXNrQ2xvbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgICAgICBjb25zdCBpc0RvbmUgPSBgJHt0YXNrLmdldERlc2NyaXB0aW9uKCl9ICR7dGFzay5nZXRDb21wbGV0ZWQoKX0tY2xvbmUtd2Vla2BcbiAgICAgICAgdGFza0Nsb25lLmlkID0gYCR7dGFzay5nZXRJRCgpfS1jbG9uZS13ZWVrYFxuICAgICAgICB0YXNrQ2xvbmUuaW5uZXJIVE1MID0gICBgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGlkPVwiJHtpc0RvbmV9XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPiR7dGFzay5nZXREZXNjcmlwdGlvbigpfSB8IGR1ZTogJHt0YXNrLmdldERhdGUoKX08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gaWQ9J2RlbC0ke3Rhc2suZ2V0SUQoKX0tY2xvbmUtd2Vlayc+ZGVsZXRlPC9idXR0b24+YFxuICAgICAgICBcbiAgICAgICAgY29uc3Qgbm9kZXMgPSB0YXNrQ2xvbmUuY2hpbGROb2Rlc1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChub2Rlc1tpXS5zdHlsZSkge1xuICAgICAgICAgICAgICAgIG5vZGVzW2ldLnN0eWxlLnNldFByb3BlcnR5KCdkaXNwbGF5JywgJ2lubGluZScpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb2xsZWN0aW9uLmZvckVhY2gocHJvamVjdCA9PiB7XG4gICAgICAgICAgICBjb25zdCB0YXNrcyA9IHByb2plY3QuZ2V0VGFza3MoKVxuICAgICAgICAgICAgdGFza3MuZm9yRWFjaCh0YXNrID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXkgPSBOdW1iZXIodGFzay5kdWVEYXRlLnNsaWNlKC0yKSlcbiAgICAgICAgICAgICAgICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKClcbiAgICAgICAgICAgICAgICBjb25zdCBkYXlUb2RheSA9IHRvZGF5LmdldERhdGUoKVxuICAgICAgICAgICAgICAgIGlmICgoZGF5IC0gZGF5VG9kYXkpIDw9IDcgJiYgIVByb2plY3RzVGFiLndlZWtDb2xsZWN0aW9uLmluY2x1ZGVzKHRhc2spKSB7XG4gICAgICAgICAgICAgICAgICAgIFByb2plY3RzVGFiLndlZWtDb2xsZWN0aW9uLnB1c2godGFzaylcbiAgICAgICAgICAgICAgICAgICAgdGFiQ29udGVudC5hcHBlbmRDaGlsZCh0YXNrQ2xvbmUpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBzdGF0aWMgc3dpdGNoQ2F0ZWdvcnkoKSB7XG4gICAgICAgIGNvbnN0IHRhYnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS10YWItdGFyZ2V0XScpXG4gICAgICAgIGNvbnN0IHRhYkNvbnRlbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtdGFiLWNvbnRlbnRdJylcblxuICAgICAgICB0YWJzLmZvckVhY2godGFiID0+IHtcbiAgICAgICAgICAgIHRhYi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0YWIuZGF0YXNldC50YWJUYXJnZXQpXG4gICAgICAgICAgICAgICAgdGFiQ29udGVudHMuZm9yRWFjaCh0YWJDb250ZW50ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGFiQ29udGVudC5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgdGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgIH1cbn0iLCJpbXBvcnQgVGFzayBmcm9tICcuL1Rhc2snXG5pbXBvcnQgUHJvamVjdCBmcm9tICcuL1Byb2plY3QnXG5pbXBvcnQgUHJvamVjdHNVSSBmcm9tICcuL1Byb2plY3RzVUknXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEluYm94VGFiIHtcbiAgICBzdGF0aWMgZGVmYXVsdFByb2plY3QgPSBuZXcgUHJvamVjdCgnZGVmYXVsdCcpXG5cbiAgICBzdGF0aWMgaW5pdGlhbGl6ZUluYm94VGFiKCkge1xuXG4gICAgICAgIEluYm94VGFiLmNyZWF0ZUZvcm0oKVxuICAgICAgICBJbmJveFRhYi5mb3JtUG9wVXAoKVxuICAgICAgICBJbmJveFRhYi5zdWJtaXRUb0luYm94KClcbiAgICAgICAgSW5ib3hUYWIuY2FuY2VsRm9ybSgpXG4gICAgfVxuXG4gICAgc3RhdGljIGNyZWF0ZUZvcm0oKSB7XG4gICAgICAgIGNvbnN0IGZvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmb3JtJylcbiAgICAgICAgY29uc3QgaW5ib3ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5ib3gnKVxuICAgICAgICBmb3JtLmlubmVySFRNTCA9IGBcbiAgICAgICAgICAgICAgICA8Zm9ybSBhY3Rpb249XCIjXCI+XG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGlkPVwidGFzay1kZXNjcmlwdGlvblwiIG5hbWU9XCJkZXNjcmlwdGlvblwiIHBsYWNlaG9sZGVyPVwidGFza1wiIC8+XG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiZGF0ZVwiIGlkPVwiZHVlRGF0ZVwiIG5hbWU9XCJkdWVEYXRlXCIgcGxhY2Vob2xkZXI9XCJkdWUgZGF0ZVwiIC8+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cInN1Ym1pdFwiIGlkPVwiaW5ib3gtc3VibWl0LWJ0blwiPlN1Ym1pdDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD1cImluYm94LWNhbmNlbC1idG5cIj5DYW5jZWw8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgICAgICBgXG4gICAgICAgIGZvcm0uY2xhc3NMaXN0LmFkZCgnaGlkZGVuJylcbiAgICAgICAgZm9ybS5pZCA9ICdpbmJveC1mb3JtJ1xuICAgICAgICBpbmJveC5hcHBlbmRDaGlsZChmb3JtKVxuICAgIH1cblxuICAgIHN0YXRpYyBmb3JtUG9wVXAoKSB7XG4gICAgICAgIGNvbnN0IGFkZFRhc2tCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYWRkLXRhc2snKVxuICAgICAgICBjb25zdCBmb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2luYm94LWZvcm0nKVxuXG4gICAgICAgIGFkZFRhc2tCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICBhZGRUYXNrQnRuLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpXG4gICAgICAgICAgICBmb3JtLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgc3RhdGljIHN1Ym1pdFRvSW5ib3goKSB7XG4gICAgICAgIGNvbnN0IHN1Ym1pdEJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbmJveC1zdWJtaXQtYnRuJylcbiAgICAgICAgY29uc3QgYWRkVGFza0J0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhZGQtdGFzaycpXG4gICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Rhc2stZGVzY3JpcHRpb24nKVxuICAgICAgICBjb25zdCBkdWVEYXRlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2R1ZURhdGUnKVxuICAgICAgICBjb25zdCBmb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2luYm94LWZvcm0nKVxuICAgICAgICBjb25zdCBpbmJveCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbmJveCcpXG5cbiAgICAgICAgc3VibWl0QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKVxuXG4gICAgICAgICAgICBhZGRUYXNrQnRuLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpXG5cbiAgICAgICAgICAgIGlmIChkZXNjcmlwdGlvbi52YWx1ZSA9PT0gXCJcIiB8fCBkdWVEYXRlLnZhbHVlID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgSW5ib3hUYWIuY2hlY2tGaWVsZHMoYWRkVGFza0J0biwgaW5ib3gpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChJbmJveFRhYi5kZWZhdWx0UHJvamVjdC5nZXRUYXNrcygpLnNvbWUodGFzayA9PiB0YXNrLmdldERlc2NyaXB0aW9uKCkgPT09IGRlc2NyaXB0aW9uLnZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGFsZXJ0KFwiVGhpcyB0b2RvIGFscmVhZHkgZXhpc3RzIVwiKVxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uLnZhbHVlID0gXCJcIlxuICAgICAgICAgICAgICAgIGR1ZURhdGUudmFsdWUgPSBcIlwiXG4gICAgICAgICAgICAgICAgZm9ybS5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKVxuICAgICAgICAgICAgfSBcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhc2sgPSBuZXcgVGFzayhkZXNjcmlwdGlvbi52YWx1ZSwgZHVlRGF0ZS52YWx1ZSlcbiAgICAgICAgICAgICAgICBJbmJveFRhYi5kZWZhdWx0UHJvamVjdC5hZGRUYXNrKHRhc2spXG4gICAgICAgICAgICAgICAgY29uc3QgdGFza0RPTUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgICAgICAgICAgICAgIHRhc2tET01FbGVtZW50LmlkID0gdGFzay5nZXRJRCgpXG4gICAgICAgICAgICAgICAgY29uc3QgaXNEb25lID0gYCR7dGFzay5nZXREZXNjcmlwdGlvbigpfSAke3Rhc2suZ2V0Q29tcGxldGVkKCl9YFxuXG4gICAgICAgICAgICAgICAgdGFza0RPTUVsZW1lbnQuaW5uZXJIVE1MID0gYDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBpZD1cIiR7aXNEb25lfVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4ke3Rhc2suZ2V0RGVzY3JpcHRpb24oKX0gfCBkdWU6ICR7dGFzay5nZXREYXRlKCl9PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGlkPSdkZWwtJHt0YXNrLmdldElEKCl9Jz5kZWxldGU8L2J1dHRvbj5gXG5cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjb25zdCBub2RlcyA9IHRhc2tET01FbGVtZW50LmNoaWxkTm9kZXNcblxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGVzW2ldLnN0eWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2Rlc1tpXS5zdHlsZS5zZXRQcm9wZXJ0eSgnZGlzcGxheScsICdpbmxpbmUnKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGluYm94Lmluc2VydEJlZm9yZSh0YXNrRE9NRWxlbWVudCwgYWRkVGFza0J0bilcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbi52YWx1ZSA9IFwiXCJcbiAgICAgICAgICAgICAgICBkdWVEYXRlLnZhbHVlID0gXCJcIlxuICAgICAgICAgICAgICAgIGZvcm0uY2xhc3NMaXN0LmFkZCgnaGlkZGVuJylcblxuICAgICAgICAgICAgICAgIEluYm94VGFiLmFkZFRvVG9kYXkodGFzaylcbiAgICAgICAgICAgICAgICBJbmJveFRhYi5hZGRUb1dlZWsodGFzaylcbiAgICAgICAgICAgICAgICBJbmJveFRhYi5kZWxldGVUYXNrKHRhc2suZ2V0SUQoKSlcbiAgICAgICAgICAgICAgICBJbmJveFRhYi5jaGVja0RvbmUoaXNEb25lKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHN0YXRpYyBhZGRUb1RvZGF5KHRhc2spIHtcbiAgICAgICAgY29uc3QgY29sbGVjdGlvbiA9IFByb2plY3RzVUkuY29sbGVjdGlvblxuICAgICAgICBjb25zdCB0YWJDb250ZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RvZGF5LWNvbnRlbnQnKVxuXG4gICAgICAgIGNvbnN0IHRhc2tDbG9uZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgICAgIGNvbnN0IGlzRG9uZSA9IGAke3Rhc2suZ2V0RGVzY3JpcHRpb24oKX0gJHt0YXNrLmdldENvbXBsZXRlZCgpfS1jbG9uZWBcbiAgICAgICAgdGFza0Nsb25lLmlkID0gYCR7dGFzay5nZXRJRCgpfS1jbG9uZWBcbiAgICAgICAgdGFza0Nsb25lLmlubmVySFRNTCA9ICAgYDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBpZD1cIiR7aXNEb25lfVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4ke3Rhc2suZ2V0RGVzY3JpcHRpb24oKX0gfCBkdWU6ICR7dGFzay5nZXREYXRlKCl9PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGlkPSdkZWwtJHt0YXNrLmdldElEKCl9LWNsb25lJz5kZWxldGU8L2J1dHRvbj5gXG4gICAgICAgIFxuICAgICAgICBjb25zdCBub2RlcyA9IHRhc2tDbG9uZS5jaGlsZE5vZGVzXG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKG5vZGVzW2ldLnN0eWxlKSB7XG4gICAgICAgICAgICAgICAgbm9kZXNbaV0uc3R5bGUuc2V0UHJvcGVydHkoJ2Rpc3BsYXknLCAnaW5saW5lJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbGxlY3Rpb24uZm9yRWFjaChwcm9qZWN0ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRhc2tzID0gcHJvamVjdC5nZXRUYXNrcygpXG4gICAgICAgICAgICB0YXNrcy5mb3JFYWNoKHRhc2sgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRheSA9IE51bWJlcih0YXNrLmR1ZURhdGUuc2xpY2UoLTIpKVxuICAgICAgICAgICAgICAgIGNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKVxuICAgICAgICAgICAgICAgIGNvbnN0IGRheVRvZGF5ID0gdG9kYXkuZ2V0RGF0ZSgpXG4gICAgICAgICAgICAgICAgaWYgKGRheSA9PT0gZGF5VG9kYXkgJiYgIVByb2plY3RzVUkudG9kYXlDb2xsZWN0aW9uLmluY2x1ZGVzKHRhc2spKSB7XG4gICAgICAgICAgICAgICAgICAgIFByb2plY3RzVUkudG9kYXlDb2xsZWN0aW9uLnB1c2godGFzaylcbiAgICAgICAgICAgICAgICAgICAgdGFiQ29udGVudC5hcHBlbmRDaGlsZCh0YXNrQ2xvbmUpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBzdGF0aWMgYWRkVG9XZWVrKHRhc2spIHtcbiAgICAgICAgY29uc3QgY29sbGVjdGlvbiA9IFByb2plY3RzVUkuY29sbGVjdGlvblxuICAgICAgICBjb25zdCB0YWJDb250ZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RoaXMtd2Vlay1jb250ZW50JylcblxuICAgICAgICBjb25zdCB0YXNrQ2xvbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgICAgICBjb25zdCBpc0RvbmUgPSBgJHt0YXNrLmdldERlc2NyaXB0aW9uKCl9ICR7dGFzay5nZXRDb21wbGV0ZWQoKX0tY2xvbmUtd2Vla2BcbiAgICAgICAgdGFza0Nsb25lLmlkID0gYCR7dGFzay5nZXRJRCgpfS1jbG9uZS13ZWVrYFxuICAgICAgICB0YXNrQ2xvbmUuaW5uZXJIVE1MID0gICBgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGlkPVwiJHtpc0RvbmV9XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPiR7dGFzay5nZXREZXNjcmlwdGlvbigpfSB8IGR1ZTogJHt0YXNrLmdldERhdGUoKX08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gaWQ9J2RlbC0ke3Rhc2suZ2V0SUQoKX0tY2xvbmUtd2Vlayc+ZGVsZXRlPC9idXR0b24+YFxuICAgICAgICBcbiAgICAgICAgY29uc3Qgbm9kZXMgPSB0YXNrQ2xvbmUuY2hpbGROb2Rlc1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChub2Rlc1tpXS5zdHlsZSkge1xuICAgICAgICAgICAgICAgIG5vZGVzW2ldLnN0eWxlLnNldFByb3BlcnR5KCdkaXNwbGF5JywgJ2lubGluZScpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb2xsZWN0aW9uLmZvckVhY2gocHJvamVjdCA9PiB7XG4gICAgICAgICAgICBjb25zdCB0YXNrcyA9IHByb2plY3QuZ2V0VGFza3MoKVxuICAgICAgICAgICAgdGFza3MuZm9yRWFjaCh0YXNrID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXkgPSBOdW1iZXIodGFzay5kdWVEYXRlLnNsaWNlKC0yKSlcbiAgICAgICAgICAgICAgICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKClcbiAgICAgICAgICAgICAgICBjb25zdCBkYXlUb2RheSA9IHRvZGF5LmdldERhdGUoKVxuICAgICAgICAgICAgICAgIGlmICgoZGF5IC0gZGF5VG9kYXkpIDw9IDcgJiYgIVByb2plY3RzVUkud2Vla0NvbGxlY3Rpb24uaW5jbHVkZXModGFzaykpIHtcbiAgICAgICAgICAgICAgICAgICAgUHJvamVjdHNVSS53ZWVrQ29sbGVjdGlvbi5wdXNoKHRhc2spXG4gICAgICAgICAgICAgICAgICAgIHRhYkNvbnRlbnQuYXBwZW5kQ2hpbGQodGFza0Nsb25lKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgc3RhdGljIGNoZWNrRG9uZShpc0RvbmUpIHtcbiAgICAgICAgY29uc3QgY2hlY2tib3ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpc0RvbmUpXG4gICAgICAgIGNvbnN0IGNoZWNrYm94Q2xvbmUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgJHtpc0RvbmV9LWNsb25lYClcbiAgICAgICAgY29uc3QgY2hlY2tib3hDbG9uZVdlZWsgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgJHtpc0RvbmV9LWNsb25lLXdlZWtgKVxuXG5cbiAgICAgICAgY2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGNoZWNrYm94LmNoZWNrZWQpIHtcbiAgICAgICAgICAgICAgICBjaGVja2JveC5wYXJlbnRFbGVtZW50LmNoaWxkTm9kZXNbMl0uc3R5bGUuc2V0UHJvcGVydHkoJ3RleHQtZGVjb3JhdGlvbicsICdsaW5lLXRocm91Z2gnKVxuICAgICAgICAgICAgICAgIGlmIChjaGVja2JveENsb25lKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrYm94Q2xvbmUuY2hlY2tlZCA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hDbG9uZS5wYXJlbnRFbGVtZW50LmNoaWxkTm9kZXNbMl0uc3R5bGUuc2V0UHJvcGVydHkoJ3RleHQtZGVjb3JhdGlvbicsICdsaW5lLXRocm91Z2gnKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY2hlY2tib3hDbG9uZVdlZWspIHtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hDbG9uZVdlZWsuY2hlY2tlZCA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hDbG9uZVdlZWsucGFyZW50RWxlbWVudC5jaGlsZE5vZGVzWzJdLnN0eWxlLnNldFByb3BlcnR5KCd0ZXh0LWRlY29yYXRpb24nLCAnbGluZS10aHJvdWdoJylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNoZWNrYm94LnBhcmVudEVsZW1lbnQuY2hpbGROb2Rlc1syXS5zdHlsZS5zZXRQcm9wZXJ0eSgndGV4dC1kZWNvcmF0aW9uJywgJ25vbmUnKVxuICAgICAgICAgICAgICAgIGlmIChjaGVja2JveENsb25lKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrYm94Q2xvbmUuY2hlY2tlZCA9IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrYm94Q2xvbmUucGFyZW50RWxlbWVudC5jaGlsZE5vZGVzWzJdLnN0eWxlLnNldFByb3BlcnR5KCd0ZXh0LWRlY29yYXRpb24nLCAnbm9uZScpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjaGVja2JveENsb25lV2Vlaykge1xuICAgICAgICAgICAgICAgICAgICBjaGVja2JveENsb25lV2Vlay5jaGVja2VkID0gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hDbG9uZVdlZWsucGFyZW50RWxlbWVudC5jaGlsZE5vZGVzWzJdLnN0eWxlLnNldFByb3BlcnR5KCd0ZXh0LWRlY29yYXRpb24nLCAnbm9uZScpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICAgIGlmIChjaGVja2JveENsb25lKSB7XG4gICAgICAgICAgICBjaGVja2JveENsb25lLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY2hlY2tib3hDbG9uZS5jaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrYm94Q2xvbmUucGFyZW50RWxlbWVudC5jaGlsZE5vZGVzWzJdLnN0eWxlLnNldFByb3BlcnR5KCd0ZXh0LWRlY29yYXRpb24nLCAnbGluZS10aHJvdWdoJylcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tib3guY2hlY2tlZCA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tib3gucGFyZW50RWxlbWVudC5jaGlsZE5vZGVzWzJdLnN0eWxlLnNldFByb3BlcnR5KCd0ZXh0LWRlY29yYXRpb24nLCAnbGluZS10aHJvdWdoJylcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjaGVja2JveENsb25lLnBhcmVudEVsZW1lbnQuY2hpbGROb2Rlc1syXS5zdHlsZS5zZXRQcm9wZXJ0eSgndGV4dC1kZWNvcmF0aW9uJywgJ25vbmUnKVxuICAgICAgICAgICAgICAgICAgICBjaGVja2JveC5jaGVja2VkID0gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tib3gucGFyZW50RWxlbWVudC5jaGlsZE5vZGVzWzJdLnN0eWxlLnNldFByb3BlcnR5KCd0ZXh0LWRlY29yYXRpb24nLCAnbm9uZScpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaGVja2JveENsb25lV2Vlaykge1xuICAgICAgICAgICAgY2hlY2tib3hDbG9uZVdlZWsuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChjaGVja2JveENsb25lV2Vlay5jaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrYm94Q2xvbmVXZWVrLnBhcmVudEVsZW1lbnQuY2hpbGROb2Rlc1syXS5zdHlsZS5zZXRQcm9wZXJ0eSgndGV4dC1kZWNvcmF0aW9uJywgJ2xpbmUtdGhyb3VnaCcpXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrYm94LmNoZWNrZWQgPSB0cnVlXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrYm94LnBhcmVudEVsZW1lbnQuY2hpbGROb2Rlc1syXS5zdHlsZS5zZXRQcm9wZXJ0eSgndGV4dC1kZWNvcmF0aW9uJywgJ2xpbmUtdGhyb3VnaCcpXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGVja2JveENsb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja2JveENsb25lLmNoZWNrZWQgPSB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja2JveENsb25lLnBhcmVudEVsZW1lbnQuY2hpbGROb2Rlc1syXS5zdHlsZS5zZXRQcm9wZXJ0eSgndGV4dC1kZWNvcmF0aW9uJywgJ2xpbmUtdGhyb3VnaCcpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjaGVja2JveENsb25lV2Vlay5wYXJlbnRFbGVtZW50LmNoaWxkTm9kZXNbMl0uc3R5bGUuc2V0UHJvcGVydHkoJ3RleHQtZGVjb3JhdGlvbicsICdub25lJylcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tib3guY2hlY2tlZCA9IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrYm94LnBhcmVudEVsZW1lbnQuY2hpbGROb2Rlc1syXS5zdHlsZS5zZXRQcm9wZXJ0eSgndGV4dC1kZWNvcmF0aW9uJywgJ25vbmUnKVxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hlY2tib3hDbG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hDbG9uZS5jaGVja2VkID0gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrYm94Q2xvbmUucGFyZW50RWxlbWVudC5jaGlsZE5vZGVzWzJdLnN0eWxlLnNldFByb3BlcnR5KCd0ZXh0LWRlY29yYXRpb24nLCAnbm9uZScpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGRlbGV0ZVRhc2soaWQpIHtcbiAgICAgICAgY29uc3QgYnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYGRlbC0ke2lkfWApXG4gICAgICAgIGNvbnN0IGJ0bkNsb25lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYGRlbC0ke2lkfS1jbG9uZWApXG4gICAgICAgIGNvbnN0IGJ0bkNsb25lV2VlayA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBkZWwtJHtpZH0tY2xvbmUtd2Vla2ApXG5cbiAgICAgICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgICAgIGUudGFyZ2V0LnBhcmVudEVsZW1lbnQucmVtb3ZlKClcbiAgICAgICAgICAgIGlmIChidG5DbG9uZSkge1xuICAgICAgICAgICAgICAgIGJ0bkNsb25lLnBhcmVudEVsZW1lbnQucmVtb3ZlKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChidG5DbG9uZVdlZWspIHtcbiAgICAgICAgICAgICAgICBidG5DbG9uZVdlZWsucGFyZW50RWxlbWVudC5yZW1vdmUoKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgSW5ib3hUYWIuZGVmYXVsdFByb2plY3QuZ2V0VGFza3MoKVxuICAgICAgICAgICAgICAgIC5zcGxpY2UoSW5ib3hUYWIuZGVmYXVsdFByb2plY3QuZ2V0VGFza3MoKVxuICAgICAgICAgICAgICAgICAgICAuZmluZEluZGV4KFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFzayA9PiB0YXNrLmdldElEKCkgPT09IGlkXG4gICAgICAgICAgICAgICAgICAgICksIDEpXG4gICAgICAgIH0pXG4gICAgICAgIGlmIChidG5DbG9uZSkge1xuICAgICAgICAgICAgYnRuQ2xvbmUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGUudGFyZ2V0LnBhcmVudEVsZW1lbnQucmVtb3ZlKClcbiAgICAgICAgICAgICAgICBidG4ucGFyZW50RWxlbWVudC5yZW1vdmUoKVxuICAgICAgICAgICAgICAgIGlmIChidG5DbG9uZVdlZWspIHtcbiAgICAgICAgICAgICAgICAgICAgYnRuQ2xvbmVXZWVrLnBhcmVudEVsZW1lbnQucmVtb3ZlKClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgSW5ib3hUYWIuZGVmYXVsdFByb2plY3QuZ2V0VGFza3MoKVxuICAgICAgICAgICAgICAgICAgICAuc3BsaWNlKEluYm94VGFiLmRlZmF1bHRQcm9qZWN0LmdldFRhc2tzKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kSW5kZXgoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFzayA9PiB0YXNrLmdldElEKCkgPT09IGlkXG4gICAgICAgICAgICAgICAgICAgICAgICApLCAxKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBpZiAoYnRuQ2xvbmVXZWVrKSB7XG4gICAgICAgICAgICBidG5DbG9uZVdlZWsuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGUudGFyZ2V0LnBhcmVudEVsZW1lbnQucmVtb3ZlKClcbiAgICAgICAgICAgICAgICBidG4ucGFyZW50RWxlbWVudC5yZW1vdmUoKVxuICAgICAgICAgICAgICAgIGlmIChidG5DbG9uZSkge1xuICAgICAgICAgICAgICAgICAgICBidG5DbG9uZS5wYXJlbnRFbGVtZW50LnJlbW92ZSgpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIEluYm94VGFiLmRlZmF1bHRQcm9qZWN0LmdldFRhc2tzKClcbiAgICAgICAgICAgICAgICAgICAgLnNwbGljZShJbmJveFRhYi5kZWZhdWx0UHJvamVjdC5nZXRUYXNrcygpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmluZEluZGV4KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2sgPT4gdGFzay5nZXRJRCgpID09PSBpZFxuICAgICAgICAgICAgICAgICAgICAgICAgKSwgMSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgY2hlY2tGaWVsZHMoYWRkVGFza0J0biwgaW5ib3gpIHtcbiAgICAgICAgY29uc3QgYWxlcnRFeGlzdHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmVtcHR5LWFsZXJ0XCIpXG5cbiAgICAgICAgYWRkVGFza0J0bi5jbGFzc0xpc3QuYWRkKFwiaGlkZGVuXCIpXG5cbiAgICAgICAgaWYgKGFsZXJ0RXhpc3RzKSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG5vdGlmeUZpZWxkcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKVxuICAgICAgICBub3RpZnlGaWVsZHMudGV4dENvbnRlbnQgPSBcIlBsZWFzZSBlbnRlciB0aGUgZGVzY3JpcHRpb24gYW5kIGR1ZSBkYXRlIG9mIHRoZSB0YXNrLlwiXG4gICAgICAgIG5vdGlmeUZpZWxkcy5jbGFzc0xpc3QuYWRkKCdlbXB0eS1hbGVydCcpXG5cbiAgICAgICAgaW5ib3guYXBwZW5kQ2hpbGQobm90aWZ5RmllbGRzKVxuXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaW5ib3gucmVtb3ZlQ2hpbGQobm90aWZ5RmllbGRzKVxuICAgICAgICB9LCAyMDAwKVxuICAgIH1cblxuICAgIHN0YXRpYyBjYW5jZWxGb3JtKCkge1xuICAgICAgICBjb25zdCBjYW5jZWxUYXNrQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2luYm94LWNhbmNlbC1idG4nKVxuICAgICAgICBjb25zdCBhZGRUYXNrQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FkZC10YXNrJylcbiAgICAgICAgY29uc3QgZm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbmJveC1mb3JtJylcblxuICAgICAgICBjYW5jZWxUYXNrQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgYWRkVGFza0J0bi5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKVxuICAgICAgICAgICAgZm9ybS5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKVxuICAgICAgICB9KVxuICAgIH1cbn0iLCJpbXBvcnQgSW5ib3hVSSBmcm9tICcuL0luYm94VUknXG5pbXBvcnQgUHJvamVjdHNVSSBmcm9tICcuL1Byb2plY3RzVUknXG5pbXBvcnQgVG9kYXlVSSBmcm9tICcuL1RvZGF5VUknXG5pbXBvcnQgVGhpc1dlZWtVSSBmcm9tICcuL1RoaXNXZWVrVUknXG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVUkge1xuICAgIHN0YXRpYyBsb2FkSG9tZXBhZ2UoKSB7XG4gICAgICAgIFVJLnN3aXRjaENhdGVnb3J5KClcblxuICAgICAgICBJbmJveFVJLmluaXRpYWxpemVJbmJveFRhYigpXG4gICAgICAgIFByb2plY3RzVUkuaW5pdGlhbGl6ZVByb2plY3RzVGFiKClcbiAgICB9XG5cbiAgICBzdGF0aWMgc3dpdGNoQ2F0ZWdvcnkoKSB7XG4gICAgICAgIGNvbnN0IHRhYnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS10YWItdGFyZ2V0XScpXG4gICAgICAgIGNvbnN0IHRhYkNvbnRlbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtdGFiLWNvbnRlbnRdJylcblxuICAgICAgICB0YWJzLmZvckVhY2godGFiID0+IHtcbiAgICAgICAgICAgIHRhYi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0YWIuZGF0YXNldC50YWJUYXJnZXQpO1xuICAgICAgICAgICAgICAgIHRhYkNvbnRlbnRzLmZvckVhY2godGFiQ29udGVudCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRhYkNvbnRlbnQuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJylcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIHRhcmdldC5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9XG59IiwiaW1wb3J0ICcuL3N0eWxlLmNzcydcbmltcG9ydCBVSSBmcm9tICcuL21vZHVsZXMvSW5pdGlhbGl6ZVVJJztcblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIFVJLmxvYWRIb21lcGFnZSk7Il0sInNvdXJjZVJvb3QiOiIifQ==