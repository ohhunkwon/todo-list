(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>r});var o=n(15),d=n.n(o),a=n(645),c=n.n(a)()(d());c.push([e.id,'*,\n*::after,\n*::before {\n  box-sizing: border-box;\n  padding: 0;\n  margin: 0;\n}\n\nhtml,\nbody {\n  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;\n  height: 100%;\n  font-size: 1.1rem;\n}\n\n.title {\n  border-bottom: 2px solid black;\n  padding: 30px;\n  font-size: 1.5rem;\n  color: white;\n  background-color: #444444;\n}\n\n.content {\n  display: flex;\n  height: 100%;\n  background-color: #EDEDED;\n}\n\n.todo-nav {\n  border-right: 2px solid black;\n  padding: 50px;\n  width: 300px;\n}\n\n.todo-categories li, h3 {\n  list-style-type: none;\n  padding: 15px 0;\n}\n\n.todos {\n  margin: 40px 50px;\n}\n\n#add-project {\n  margin: 10px 0px;\n}\n\nform {\n  margin: 15px 0px;\n}\n\n[data-tab-content] {\n  display: none;\n}\n\n[data-tab-content] p {\n  padding: 10px 0;\n}\n\n.active[data-tab-content] {\n  display: block;\n}\n\n.hidden {\n  display: none;\n}\n\n.empty-alert {\n  color: red;\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;;;EAGE,sBAAsB;EACtB,UAAU;EACV,SAAS;AACX;;AAEA;;EAEE,4DAA4D;EAC5D,YAAY;EACZ,iBAAiB;AACnB;;AAEA;EACE,8BAA8B;EAC9B,aAAa;EACb,iBAAiB;EACjB,YAAY;EACZ,yBAAyB;AAC3B;;AAEA;EACE,aAAa;EACb,YAAY;EACZ,yBAAyB;AAC3B;;AAEA;EACE,6BAA6B;EAC7B,aAAa;EACb,YAAY;AACd;;AAEA;EACE,qBAAqB;EACrB,eAAe;AACjB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,UAAU;AACZ",sourcesContent:['*,\n*::after,\n*::before {\n  box-sizing: border-box;\n  padding: 0;\n  margin: 0;\n}\n\nhtml,\nbody {\n  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;\n  height: 100%;\n  font-size: 1.1rem;\n}\n\n.title {\n  border-bottom: 2px solid black;\n  padding: 30px;\n  font-size: 1.5rem;\n  color: white;\n  background-color: #444444;\n}\n\n.content {\n  display: flex;\n  height: 100%;\n  background-color: #EDEDED;\n}\n\n.todo-nav {\n  border-right: 2px solid black;\n  padding: 50px;\n  width: 300px;\n}\n\n.todo-categories li, h3 {\n  list-style-type: none;\n  padding: 15px 0;\n}\n\n.todos {\n  margin: 40px 50px;\n}\n\n#add-project {\n  margin: 10px 0px;\n}\n\nform {\n  margin: 15px 0px;\n}\n\n[data-tab-content] {\n  display: none;\n}\n\n[data-tab-content] p {\n  padding: 10px 0;\n}\n\n.active[data-tab-content] {\n  display: block;\n}\n\n.hidden {\n  display: none;\n}\n\n.empty-alert {\n  color: red;\n}\n'],sourceRoot:""}]);const r=c},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,o){"string"==typeof e&&(e=[[null,e,""]]);var d={};if(o)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(d[c]=!0)}for(var r=0;r<e.length;r++){var s=[].concat(e[r]);o&&d[s[0]]||(n&&(s[2]?s[2]="".concat(n," and ").concat(s[2]):s[2]=n),t.push(s))}},t}},15:e=>{function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}e.exports=function(e){var n,o,d=(o=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var o,d,a=[],c=!0,r=!1;try{for(n=n.call(e);!(c=(o=n.next()).done)&&(a.push(o.value),!t||a.length!==t);c=!0);}catch(e){r=!0,d=e}finally{try{c||null==n.return||n.return()}finally{if(r)throw d}}return a}}(n,o)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var o=Object.prototype.toString.call(e).slice(8,-1);return"Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o?Array.from(e):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?t(e,n):void 0}}(n,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=d[1],c=d[3];if(!c)return a;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(c)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(s," */"),l=c.sources.map((function(e){return"/*# sourceURL=".concat(c.sourceRoot||"").concat(e," */")}));return[a].concat(l).concat([i]).join("\n")}return[a].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var a={},c=[],r=0;r<e.length;r++){var s=e[r],i=o.base?s[0]+o.base:s[0],l=a[i]||0,m="".concat(i," ").concat(l);a[i]=l+1;var p=n(m),u={css:s[1],media:s[2],sourceMap:s[3]};-1!==p?(t[p].references++,t[p].updater(u)):t.push({identifier:m,updater:d(u,o),references:1}),c.push(m)}return c}function d(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n.update(e=t)}else n.remove()}}e.exports=function(e,d){var a=o(e=e||[],d=d||{});return function(e){e=e||[];for(var c=0;c<a.length;c++){var r=n(a[c]);t[r].references--}for(var s=o(e,d),i=0;i<a.length;i++){var l=n(a[i]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}a=s}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o=n.css,d=n.media,a=n.sourceMap;d?e.setAttribute("media",d):e.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(o,e)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var d=t[o];if(void 0!==d)return d.exports;var a=t[o]={id:o,exports:{}};return e[o](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e=n(379),t=n.n(e),o=n(795),d=n.n(o),a=n(569),c=n.n(a),r=n(565),s=n.n(r),i=n(216),l=n.n(i),m=n(589),p=n.n(m),u=n(426),h={};h.styleTagTransform=p(),h.setAttributes=s(),h.insert=c().bind(null,"head"),h.domAPI=d(),h.insertStyleElement=l(),t()(u.Z,h),u.Z&&u.Z.locals&&u.Z.locals;class g{constructor(e,t,n){this.description=e,this.dueDate=t,this.completed=!1,this.id=Date.now()}setDescription(e){this.description=e}getDescription(){return this.description}setDate(){this.dueDate=dueDate}getDate(){return this.dueDate}setCompleted(){this.completed?this.completed=!1:this.completed=!0}getCompleted(){return this.completed}getID(){return this.id}}class y{constructor(e){this.name=e,this.tasks=[]}setName(e){this.name=e}getName(){return this.name}setTasks(e){this.tasks=e}getTasks(){return this.tasks}addTask(e){this.tasks.push(e)}}class E{static collection=[];static todayCollection=[];static weekCollection=[];static initializeProjectsTab(){const e=E.allProjectsStorage();if(e){E.createForm(),E.formPopUp(),E.submitToProjects(),E.cancelSubmission();const t=document.getElementById("add-project"),n=document.getElementById("project-description"),o=document.getElementById("projects-tab"),d=document.getElementById("projects-form"),a=document.getElementById("todos");console.log(e),e.forEach((e=>{console.log(e);const c=JSON.parse(e);Object.setPrototypeOf(c,new y),console.log(c),E.renderProjects(c,a,o,n,d,t);const r=document.getElementById(`add-task-to-${c.getName()}`),s=document.getElementById(`task-description-${c.getName()}`),i=document.getElementById(`dueDate-${c.getName()}`),l=document.getElementById(`${c.getName()}-form`),m=document.getElementById(`${c.getName()}`);console.log("proj Div",m),c.getTasks().forEach((e=>{e&&(Object.setPrototypeOf(e,new g),console.log(e),E.renderTasks(e,c,m,s,i,l,r))}))}))}else E.createForm(),E.formPopUp(),E.submitToProjects(),E.cancelSubmission()}static allProjectsStorage(){let e=[];const t=Object.keys(localStorage);let n=t.length;for(;n--;)e.push(localStorage.getItem(t[n]));return e}static storageUpdateProject(e){console.log(e),localStorage.setItem(`${e.getName()}`,JSON.stringify(e))}static renderProjects(e,t,n,o,d,a){E.collection.push(e);const c=document.createElement("li");c.setAttribute("data-tab-target",`${e.getName()}`),c.textContent=`${e.getName()}`;const r=document.createElement("div");r.id=`${e.getName()}`,r.setAttribute("data-tab-content","");const s=document.createElement("h3");s.textContent=`${e.getName()}`;const i=document.createElement("p");i.textContent="+ Add Task",i.id=`add-task-to-${e.getName()}`,r.appendChild(s),r.appendChild(i),t.appendChild(r),n.insertBefore(c,a),o.value="",d.classList.add("hidden");const l=document.createElement("form"),m=document.getElementById(`${e.getName()}`);E.addFormToProject(e,l,m),E.projectFormPopUp(i,l),E.submitTaskToProject(e,m),E.switchCategory()}static renderTasks(e,t,n,o,d,a,c){const r=document.createElement("p");r.id=e.getID();const s=`${e.getDescription()} ${e.getCompleted()}`;r.innerHTML=`<input type="checkbox" id="${s}">\n                                            <p>${e.getDescription()} | due: ${e.getDate()}</p>\n                                            <button id='del-${e.getID()}'>delete</button>`;const i=r.childNodes;for(let e=0;e<i.length;e++)i[e].style&&i[e].style.setProperty("display","inline");n.insertBefore(r,c),o.value="",d.value="",a.classList.add("hidden"),E.addToToday(e),E.addToWeek(e),E.deleteTask(e.getID(),t),E.checkDone(s)}static createForm(){const e=document.createElement("form"),t=document.getElementById("projects-tab");e.innerHTML='\n                <form action="#">\n                    <input type="text" id="project-description" name="description" placeholder="project" />\n                    <button type="submit" id="projects-submit-btn">Submit</button>\n                    <button type="button" id="projects-cancel-btn">Cancel</button>\n                </form>\n            ',e.classList.add("hidden"),e.id="projects-form",t.appendChild(e)}static formPopUp(){const e=document.getElementById("add-project"),t=document.getElementById("projects-form");e.addEventListener("click",(()=>{e.classList.add("hidden"),t.classList.remove("hidden")}))}static submitToProjects(){const e=document.getElementById("projects-submit-btn"),t=document.getElementById("add-project"),n=document.getElementById("project-description"),o=document.getElementById("projects-tab"),d=document.getElementById("projects-form"),a=document.getElementById("todos");e.addEventListener("click",(e=>{if(e.preventDefault(),t.classList.remove("hidden"),""===n.value)E.checkFields();else if(E.collection.some((e=>e.getName()===n.value)))alert("This project already exists!");else{const e=new y(n.value);E.renderProjects(e,a,o,n,d,t),E.storageUpdateProject(e)}}))}static checkFields(){const e=document.getElementById("add-project"),t=document.getElementById("projects-tab"),n=document.querySelector(".empty-alert");if(e.classList.add("hidden"),n)return;const o=document.createElement("p");o.textContent="Please enter the title of the project.",o.classList.add("empty-alert"),t.appendChild(o),setTimeout((function(){t.removeChild(o)}),2e3)}static checkInboxFields(e,t){const n=document.querySelector(".empty-alert");if(e.classList.add("hidden"),n)return;const o=document.createElement("p");o.textContent="Please enter the description and due date of the task.",o.classList.add("empty-alert"),t.appendChild(o),setTimeout((function(){t.removeChild(o)}),2e3)}static cancelSubmission(){const e=document.getElementById("projects-cancel-btn"),t=document.getElementById("add-project"),n=document.getElementById("projects-form");e.addEventListener("click",(()=>{t.classList.remove("hidden"),n.classList.add("hidden")}))}static cancelForm(e){const t=document.getElementById(`${e.getName()}-cancel-btn`),n=document.getElementById(`add-task-to-${e.getName()}`),o=document.getElementById(`${e.getName()}-form`);t.addEventListener("click",(()=>{n.classList.remove("hidden"),o.classList.add("hidden")}))}static addFormToProject(e,t,n){t.innerHTML=`\n        <form action="#">\n            <input type="text" id="task-description-${e.getName()}" name="description" placeholder="task" />\n            <input type="date" id="dueDate-${e.getName()}" name="dueDate" placeholder="due date" />\n            <button type="submit" id="${e.getName()}-submit-btn">Submit</button>\n            <button type="button" id="${e.getName()}-cancel-btn">Cancel</button>\n        </form>`,t.classList.add("hidden"),t.id=`${e.getName()}-form`,n.appendChild(t),E.cancelForm(e)}static projectFormPopUp(e,t){e.addEventListener("click",(()=>{e.classList.add("hidden"),t.classList.remove("hidden")}))}static submitTaskToProject(e,t){const n=document.getElementById(`${e.getName()}-submit-btn`),o=document.getElementById(`add-task-to-${e.getName()}`),d=document.getElementById(`task-description-${e.getName()}`),a=document.getElementById(`dueDate-${e.getName()}`),c=document.getElementById(`${e.getName()}-form`);n.addEventListener("click",(n=>{if(n.preventDefault(),o.classList.remove("hidden"),""===d.value||""===a.value)E.checkInboxFields(o,t);else if(e.getTasks().some((e=>e.getDescription()===d.value)))alert("This todo already exists!"),d.value="",a.value="",c.classList.add("hidden");else{const n=new g(d.value,a.value);e.addTask(n),E.storageUpdateProject(e),E.renderTasks(n,e,t,d,a,c,o)}}))}static checkDone(e){const t=document.getElementById(e),n=document.getElementById(`${e}-clone`),o=document.getElementById(`${e}-clone-week`);t.addEventListener("change",(()=>{t.checked?(t.parentElement.childNodes[2].style.setProperty("text-decoration","line-through"),n&&(n.checked=!0,n.parentElement.childNodes[2].style.setProperty("text-decoration","line-through")),o&&(o.checked=!0,o.parentElement.childNodes[2].style.setProperty("text-decoration","line-through"))):(t.parentElement.childNodes[2].style.setProperty("text-decoration","none"),n&&(n.checked=!1,n.parentElement.childNodes[2].style.setProperty("text-decoration","none")),o&&(o.checked=!1,o.parentElement.childNodes[2].style.setProperty("text-decoration","none")))})),n&&n.addEventListener("change",(()=>{n.checked?(n.parentElement.childNodes[2].style.setProperty("text-decoration","line-through"),t.checked=!0,t.parentElement.childNodes[2].style.setProperty("text-decoration","line-through")):(n.parentElement.childNodes[2].style.setProperty("text-decoration","none"),t.checked=!1,t.parentElement.childNodes[2].style.setProperty("text-decoration","none"))})),o&&o.addEventListener("change",(()=>{o.checked?(o.parentElement.childNodes[2].style.setProperty("text-decoration","line-through"),t.checked=!0,t.parentElement.childNodes[2].style.setProperty("text-decoration","line-through"),n&&(n.checked=!0,n.parentElement.childNodes[2].style.setProperty("text-decoration","line-through"))):(o.parentElement.childNodes[2].style.setProperty("text-decoration","none"),t.checked=!1,t.parentElement.childNodes[2].style.setProperty("text-decoration","none"),n&&(n.checked=!1,n.parentElement.childNodes[2].style.setProperty("text-decoration","none")))}))}static deleteTask(e,t){const n=document.getElementById(`del-${e}`),o=document.getElementById(`del-${e}-clone`),d=document.getElementById(`del-${e}-clone-week`);n.addEventListener("click",(n=>{n.target.parentElement.remove(),o&&o.parentElement.remove(),d&&d.parentElement.remove(),t.getTasks().splice(t.getTasks().findIndex((t=>t.getID()===e)),1),E.storageUpdateProject(t)})),o&&o.addEventListener("click",(o=>{o.target.parentElement.remove(),n.parentElement.remove(),d&&d.parentElement.remove(),t.getTasks().splice(t.getTasks().findIndex((t=>t.getID()===e)),1),E.storageUpdateProject(t)})),d&&d.addEventListener("click",(d=>{d.target.parentElement.remove(),n.parentElement.remove(),o&&o.parentElement.remove(),t.getTasks().splice(t.getTasks().findIndex((t=>t.getID()===e)),1),E.storageUpdateProject(t)}))}static addToToday(e){const t=E.collection,n=document.getElementById("today-content"),o=document.createElement("div"),d=`${e.getDescription()} ${e.getCompleted()}-clone`;o.id=`${e.getID()}-clone`,o.innerHTML=`<input type="checkbox" id="${d}">\n                                <p>${e.getDescription()} | due: ${e.getDate()}</p>\n                                <button id='del-${e.getID()}-clone'>delete</button>`;const a=o.childNodes;for(let e=0;e<a.length;e++)a[e].style&&a[e].style.setProperty("display","inline");console.log("lets see if project contains task",t),t.forEach((e=>{e.getTasks().forEach((e=>{Number(e.dueDate.slice(-2))!==(new Date).getDate()||E.todayCollection.includes(e)||(E.todayCollection.push(e),n.appendChild(o))}))}))}static addToWeek(e){const t=E.collection,n=document.getElementById("this-week-content"),o=document.createElement("div"),d=`${e.getDescription()} ${e.getCompleted()}-clone-week`;o.id=`${e.getID()}-clone-week`,o.innerHTML=`<input type="checkbox" id="${d}">\n                                <p>${e.getDescription()} | due: ${e.getDate()}</p>\n                                <button id='del-${e.getID()}-clone-week'>delete</button>`;const a=o.childNodes;for(let e=0;e<a.length;e++)a[e].style&&a[e].style.setProperty("display","inline");t.forEach((e=>{e.getTasks().forEach((e=>{Number(e.dueDate.slice(-2))-(new Date).getDate()<=7&&!E.weekCollection.includes(e)&&(E.weekCollection.push(e),n.appendChild(o))}))}))}static switchCategory(){const e=document.querySelectorAll("[data-tab-target]"),t=document.querySelectorAll("[data-tab-content]");e.forEach((e=>{e.addEventListener("click",(()=>{const n=document.getElementById(e.dataset.tabTarget);t.forEach((e=>{e.classList.remove("active")})),n.classList.add("active")}))}))}}class f{static defaultProject=new y("default");static initializeInboxTab(){f.createForm(),f.formPopUp(),f.submitToInbox(),f.cancelForm(),f.addDefaultProject()}static addDefaultProject(){E.collection.push(f.defaultProject)}static renderTasks(e,t,n,o,d,a){const c=document.createElement("div");c.id=e.getID();const r=`${e.getDescription()} ${e.getCompleted()}`;c.innerHTML=`<input type="checkbox" id="${r}">\n                                            <p>${e.getDescription()} | due: ${e.getDate()}</p>\n                                            <button id='del-${e.getID()}'>delete</button>`;const s=c.childNodes;for(let e=0;e<s.length;e++)s[e].style&&s[e].style.setProperty("display","inline");t.insertBefore(c,a),n.value="",o.value="",d.classList.add("hidden"),f.addToToday(e),f.addToWeek(e),f.deleteTask(e.getID()),f.checkDone(r)}static createForm(){const e=document.createElement("form"),t=document.getElementById("inbox");e.innerHTML='\n                <form action="#">\n                    <input type="text" id="task-description" name="description" placeholder="task" />\n                    <input type="date" id="dueDate" name="dueDate" placeholder="due date" />\n                    <button type="submit" id="inbox-submit-btn">Submit</button>\n                    <button type="button" id="inbox-cancel-btn">Cancel</button>\n                </form>\n            ',e.classList.add("hidden"),e.id="inbox-form",t.appendChild(e)}static formPopUp(){const e=document.getElementById("add-task"),t=document.getElementById("inbox-form");e.addEventListener("click",(()=>{e.classList.add("hidden"),t.classList.remove("hidden")}))}static submitToInbox(){const e=document.getElementById("inbox-submit-btn"),t=document.getElementById("add-task"),n=document.getElementById("task-description"),o=document.getElementById("dueDate"),d=document.getElementById("inbox-form"),a=document.getElementById("inbox");e.addEventListener("click",(e=>{if(e.preventDefault(),t.classList.remove("hidden"),""===n.value||""===o.value)f.checkFields(t,a);else if(f.defaultProject.getTasks().some((e=>e.getDescription()===n.value)))alert("This todo already exists!"),n.value="",o.value="",d.classList.add("hidden");else{const e=new g(n.value,o.value);f.defaultProject.addTask(e),f.renderTasks(e,a,n,o,d,t)}}))}static addToToday(e){const t=E.collection,n=document.getElementById("today-content"),o=document.createElement("div"),d=`${e.getDescription()} ${e.getCompleted()}-clone`;o.id=`${e.getID()}-clone`,o.innerHTML=`<input type="checkbox" id="${d}">\n                                <p>${e.getDescription()} | due: ${e.getDate()}</p>\n                                <button id='del-${e.getID()}-clone'>delete</button>`;const a=o.childNodes;for(let e=0;e<a.length;e++)a[e].style&&a[e].style.setProperty("display","inline");t.forEach((e=>{e.getTasks().forEach((e=>{Number(e.dueDate.slice(-2))!==(new Date).getDate()||E.todayCollection.includes(e)||(E.todayCollection.push(e),n.appendChild(o))}))}))}static addToWeek(e){const t=E.collection,n=document.getElementById("this-week-content"),o=document.createElement("div"),d=`${e.getDescription()} ${e.getCompleted()}-clone-week`;o.id=`${e.getID()}-clone-week`,o.innerHTML=`<input type="checkbox" id="${d}">\n                                <p>${e.getDescription()} | due: ${e.getDate()}</p>\n                                <button id='del-${e.getID()}-clone-week'>delete</button>`;const a=o.childNodes;for(let e=0;e<a.length;e++)a[e].style&&a[e].style.setProperty("display","inline");t.forEach((e=>{e.getTasks().forEach((e=>{Number(e.dueDate.slice(-2))-(new Date).getDate()<=7&&!E.weekCollection.includes(e)&&(E.weekCollection.push(e),n.appendChild(o))}))}))}static checkDone(e){const t=document.getElementById(e),n=document.getElementById(`${e}-clone`),o=document.getElementById(`${e}-clone-week`);t.addEventListener("change",(()=>{t.checked?(t.parentElement.childNodes[2].style.setProperty("text-decoration","line-through"),n&&(n.checked=!0,n.parentElement.childNodes[2].style.setProperty("text-decoration","line-through")),o&&(o.checked=!0,o.parentElement.childNodes[2].style.setProperty("text-decoration","line-through"))):(t.parentElement.childNodes[2].style.setProperty("text-decoration","none"),n&&(n.checked=!1,n.parentElement.childNodes[2].style.setProperty("text-decoration","none")),o&&(o.checked=!1,o.parentElement.childNodes[2].style.setProperty("text-decoration","none")))})),n&&n.addEventListener("change",(()=>{n.checked?(n.parentElement.childNodes[2].style.setProperty("text-decoration","line-through"),t.checked=!0,t.parentElement.childNodes[2].style.setProperty("text-decoration","line-through")):(n.parentElement.childNodes[2].style.setProperty("text-decoration","none"),t.checked=!1,t.parentElement.childNodes[2].style.setProperty("text-decoration","none"))})),o&&o.addEventListener("change",(()=>{o.checked?(o.parentElement.childNodes[2].style.setProperty("text-decoration","line-through"),t.checked=!0,t.parentElement.childNodes[2].style.setProperty("text-decoration","line-through"),n&&(n.checked=!0,n.parentElement.childNodes[2].style.setProperty("text-decoration","line-through"))):(o.parentElement.childNodes[2].style.setProperty("text-decoration","none"),t.checked=!1,t.parentElement.childNodes[2].style.setProperty("text-decoration","none"),n&&(n.checked=!1,n.parentElement.childNodes[2].style.setProperty("text-decoration","none")))}))}static deleteTask(e){const t=document.getElementById(`del-${e}`),n=document.getElementById(`del-${e}-clone`),o=document.getElementById(`del-${e}-clone-week`);t.addEventListener("click",(t=>{t.target.parentElement.remove(),n&&n.parentElement.remove(),o&&o.parentElement.remove(),f.defaultProject.getTasks().splice(f.defaultProject.getTasks().findIndex((t=>t.getID()===e)),1)})),n&&n.addEventListener("click",(n=>{n.target.parentElement.remove(),t.parentElement.remove(),o&&o.parentElement.remove(),f.defaultProject.getTasks().splice(f.defaultProject.getTasks().findIndex((t=>t.getID()===e)),1)})),o&&o.addEventListener("click",(o=>{o.target.parentElement.remove(),t.parentElement.remove(),n&&n.parentElement.remove(),f.defaultProject.getTasks().splice(f.defaultProject.getTasks().findIndex((t=>t.getID()===e)),1)}))}static checkFields(e,t){const n=document.querySelector(".empty-alert");if(e.classList.add("hidden"),n)return;const o=document.createElement("p");o.textContent="Please enter the description and due date of the task.",o.classList.add("empty-alert"),t.appendChild(o),setTimeout((function(){t.removeChild(o)}),2e3)}static cancelForm(){const e=document.getElementById("inbox-cancel-btn"),t=document.getElementById("add-task"),n=document.getElementById("inbox-form");e.addEventListener("click",(()=>{t.classList.remove("hidden"),n.classList.add("hidden")}))}}class b{static loadHomepage(){b.switchCategory(),f.initializeInboxTab(),E.initializeProjectsTab()}static switchCategory(){const e=document.querySelectorAll("[data-tab-target]"),t=document.querySelectorAll("[data-tab-content]");e.forEach((e=>{e.addEventListener("click",(()=>{const n=document.getElementById(e.dataset.tabTarget);t.forEach((e=>{e.classList.remove("active")})),n.classList.add("active")}))}))}}document.addEventListener("DOMContentLoaded",b.loadHomepage)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,